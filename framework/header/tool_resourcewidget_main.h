/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef MAGUS_RESOURCE_MAIN_H
#define MAGUS_RESOURCE_MAIN_H

#include <QCloseEvent>
#include <QMainWindow>
#include <QMenu>
#include <QAction>
#include <QMessageBox>
#include <QToolBar>
#include "constants.h"
#include "tool_resourcewidget_assets.h"
#include "tool_resourcewidget_sources.h"

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

namespace Magus
{
    /****************************************************************************
    MainWindow is the main container window

    IMPORTANT:
    =========
    This class is changed to facilitate the HLMS editor. Do not use it as a
    generic Magus class.
    ***************************************************************************/
    class QtResourceMain : public QMainWindow
    {
        Q_OBJECT

        public:
            QtResourceMain(const QString& iconDir, QWidget * parent = 0);
            ~QtResourceMain(void);

            // Returns a list of all resources in the resource tree. This includes both groups, subgroups and assets
            QVector<QtResourceInfo*>& getResources (void);

            // Creates the resourcetree and loads the assets. Setting the resources generates a signal (resourceAdded) from
            // mSourcesDockWidget; this automatically adds the assets to the mAssetsDockWidget
            void setResources (const QVector<QtResourceInfo*>& resources);

            // Add a material to  the resourcetree
            void addMaterial(const QString& baseNameJson,
                             const QString& fullNameJson,
                             const QString& baseNameThumb,
                             EditorHlmsTypes type);

            // Initialise the resourcetree
            void initResourceTree(void);

            // Returns the qualified name of the currently selected item from the resource tree
            const QString& getSelectedFullQualifiedName(void);

            void update(void);
            bool mIsClosing;

        signals:
            void jSonFileSelectedToProcess(const QString& fullNameJson);

        private slots:
            void handleResourceSelected(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName);
            void handleResourceDoubleClicked(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName);
            void handleResourceAdded(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName);
            void handleResourceDeleted(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName);
            void handleResourceSearched(const QString& searchPattern);
            void handleResourceSearchReset(void);
            void handleTabChanged(int toplevelId);
            void handleAssetDeleted(const QString& name, const QString& baseName);
            void handleAssetSelected(const QString& name, const QString& baseName);
            void handleAssetDoubleClicked(const QString& name, const QString& baseName);

        private:
            void createActions(void);
            void createMenus(void);
            void createToolBars(void);
            void createStatusBar(void);
            void createDockWindows(void);
            void closeEvent(QCloseEvent* event);

            QtSourcesDockWidget* mSourcesDockWidget;
            QtAssetsDockWidget* mAssetsDockWidget;
            QString mIconDir;
            QString mSelectedFileName;
    };
}

#endif

