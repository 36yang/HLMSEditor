/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "magus_core.h"
#include "tool_resourcewidget.h"
#include "tool_resourcewidget_assets.h"

namespace Magus
{
    //****************************************************************************/
    QtAssetsDockWidget::QtAssetsDockWidget(const QString& iconDir, const QString& title, QMainWindow* parent, Qt::WindowFlags flags) :
        QDockWidget (title, parent, flags),
        mParent(parent)
    {
        mIconDir = iconDir;
        mInnerMain = new QMainWindow();
        setWidget(mInnerMain);
        mTabWidget = new QTabWidget(mInnerMain);
        mInnerMain->setCentralWidget(mTabWidget);
        mTabWidget->show();
        QWidget* oldTitleBar = titleBarWidget();
        setTitleBarWidget(new QWidget());
        delete oldTitleBar;

        // Create PBS selection widget
        mPbsSelection = new QtDefaultTextureWidget(this);
        mPbsSelection->setTextureSize(QSize(120, 120));
        connect(mPbsSelection, SIGNAL(selected(QString,QString)), this, SLOT(handleAssetSelected(QString,QString)));
        connect(mPbsSelection, SIGNAL(doubleClicked(QString,QString)), this, SLOT(handleAssetDoubleClicked(QString,QString)));
        connect(mPbsSelection, SIGNAL(assetDeleted(QString,QString)), this, SLOT(handleAssetDeleted(QString,QString)));

        // Create Unlit selection widget
        mUnlitSelection = new QtDefaultTextureWidget(this);
        mUnlitSelection->setTextureSize(QSize(120, 120));
        connect(mUnlitSelection, SIGNAL(selected(QString,QString)), this, SLOT(handleAssetSelected(QString,QString)));
        connect(mUnlitSelection, SIGNAL(doubleClicked(QString,QString)), this, SLOT(handleAssetDoubleClicked(QString,QString)));
        connect(mUnlitSelection, SIGNAL(assetDeleted(QString,QString)), this, SLOT(handleAssetDeleted(QString,QString)));

        // -------------------------------------- Fill the assets widget --------------------------------------
        QIcon pbsIcon(mIconDir + TOOL_RESOURCE_ICON_PBS);
        addTab(mPbsSelection, pbsIcon, QString("PBS"));

        QIcon unlitIcon(mIconDir + TOOL_RESOURCE_ICON_UNLIT);
        addTab(mUnlitSelection, unlitIcon, QString("Unlit"));

        // Perform standard functions
        createActions();
        createMenus();
        createToolBars();

        connect(mTabWidget, SIGNAL(currentChanged(int)), this, SLOT(handleTabChanged(int)));
    }

    //****************************************************************************/
    QtAssetsDockWidget::~QtAssetsDockWidget(void)
    {
    }

    //****************************************************************************/
    void QtAssetsDockWidget::addTab(QWidget* widget, const QIcon& icon, const QString& name)
    {
        mTabWidget->addTab(widget, icon, name);
    }

    //****************************************************************************/
    void QtAssetsDockWidget::createActions(void)
    {
    }

    //****************************************************************************/
    void QtAssetsDockWidget::createMenus(void)
    {
    }

    //****************************************************************************/
    void QtAssetsDockWidget::createToolBars(void)
    {
    }

    //****************************************************************************/
    void QtAssetsDockWidget::setResources(const QVector<QtResourceInfo*>& resources)
    {
        clearContent();
        QVectorIterator<QtResourceInfo*> it(resources);
        it.toFront();
        QtResourceInfo* info;
        QString baseNameThumb;
        while (it.hasNext())
        {
            info = it.next();
            if (info->resourceType == TOOL_RESOURCETREE_KEY_TYPE_ASSET)
            {
                baseNameThumb = info->resourceName + QString (".png");
                addAsset(info->topLevelId, 0, 0, THUMBS_PATH.c_str() + baseNameThumb, baseNameThumb);
            }
        }
    }

    //****************************************************************************/
    bool QtAssetsDockWidget::addMaterial(const QString& baseNameJson,
                                         const QString& fullNameJson,
                                         const QString& baseNameThumb,
                                         EditorHlmsTypes type)
    {
        switch (type)
        {
            case HLMS_PBS:
            {
                addAsset(TOOL_SOURCES_LEVEL_X000_PBS, 0, 0, THUMBS_PATH.c_str() + baseNameThumb, baseNameThumb);
            }
            break;

            case HLMS_UNLIT:
            {
                addAsset(TOOL_SOURCES_LEVEL_X000_UNLIT, 0, 0, THUMBS_PATH.c_str() + baseNameThumb, baseNameThumb);
            }
            break;
        }
        return true;
    }

    //****************************************************************************/
    void QtAssetsDockWidget::addAsset(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
    {
        QPixmap pixmap;
        if (fileExist(name))
            pixmap.load(name);
        else
            pixmap.load(FILE_NO_IMAGE);

        switch (toplevelId)
        {
            case TOOL_SOURCES_LEVEL_X000_PBS:
            {
                // Add pixmap from file to mPbsSelection
                mPbsSelection->addTexture(pixmap, name, baseName);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_UNLIT:
            {
                // Add pixmap from file to mUnlitSelection
                mUnlitSelection->addTexture(pixmap, name, baseName);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtAssetsDockWidget::selectTab(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
    {
        mTabWidget->setCurrentIndex(toplevelId-1); // Assume that toplevelId follows pattern 1, 2, 3, 4, 5
    }

    //****************************************************************************/
    void QtAssetsDockWidget::setSelectThumb(int toplevelId, const QString& baseNameThumb)
    {
        switch (toplevelId)
        {
            case TOOL_SOURCES_LEVEL_X000_PBS:
            {
                // Set the widget in mPbsSelection selected
                mPbsSelection->setTextureSelected(baseNameThumb);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_UNLIT:
            {
                // Set the widget in mUnlitSelection selected
                mUnlitSelection->setTextureSelected(baseNameThumb);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtAssetsDockWidget::deleteAsset(const QString& name, bool nameIsFullName)
    {
        // Delete from mPbsSelection
        mPbsSelection->deleteTexture(name, nameIsFullName);

        // Delete from mUnlitSelection
        mUnlitSelection->deleteTexture(name, nameIsFullName);
    }

    //****************************************************************************/
    void QtAssetsDockWidget::deleteAsset(int toplevelId, const QString& name, bool nameIsFullName)
    {
        switch (toplevelId)
        {
            case TOOL_SOURCES_LEVEL_X000_PBS:
            {
                // Delete from mPbsSelection
                mPbsSelection->deleteTexture(name, nameIsFullName);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_UNLIT:
            {
                // Delete from mUnlitSelection
                mUnlitSelection->deleteTexture(name, nameIsFullName);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtAssetsDockWidget::deleteAsset(int toplevelId, const QString& name, const QString& baseName)
    {
        switch (toplevelId)
        {
            case TOOL_SOURCES_LEVEL_X000_PBS:
            {
                // Delete from mPbsSelection
                mPbsSelection->deleteTexture(name, baseName);
            }
            break;

            case TOOL_SOURCES_LEVEL_X000_UNLIT:
            {
                // Delete from mUnlitSelection
                mUnlitSelection->deleteTexture(name, baseName);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtAssetsDockWidget::filter(const QString& pattern)
    {
        resetFilter();
        mPbsSelection->filter(pattern);
        mUnlitSelection->filter(pattern);
    }

    //****************************************************************************/
    void QtAssetsDockWidget::resetFilter(void)
    {
        mPbsSelection->resetFilter();
        mUnlitSelection->resetFilter();
    }

    //****************************************************************************/
    void QtAssetsDockWidget::clearContent(void)
    {
        mPbsSelection->clearContent();
        mUnlitSelection->clearContent();
    }

    //****************************************************************************/
    void QtAssetsDockWidget::handleTabChanged(int index)
    {
        emit tabChanged(index + 1);
    }

    //****************************************************************************/
    void QtAssetsDockWidget::handleAssetDeleted(const QString& name, const QString& baseName)
    {
        // Note, that these are the thumb image names
        emit assetDeleted(name, baseName);
    }

    //****************************************************************************/
    void QtAssetsDockWidget::handleAssetSelected(const QString& name, const QString& baseName)
    {
        // Note, that these are the thumb image names
        emit assetSelected(name, baseName);
    }

    //****************************************************************************/
    void QtAssetsDockWidget::handleAssetDoubleClicked(const QString& name, const QString& baseName)
    {
        // Note, that these are the thumb image names
        emit assetDoubleClicked(name, baseName);
    }

}
