/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QString>
#include <QFile>
#include <QMenuBar>
#include "magus_core.h"
#include "tool_resourcewidget_main.h"
#include "tool_resourcewidget_assets.h"

namespace Magus
{
    //****************************************************************************/
    QtResourceMain::QtResourceMain(const QString& iconDir, QWidget* parent) : QMainWindow(parent), mIsClosing(false)
    {
        mIconDir = iconDir;
        mSelectedFileName = "";

        // Perform standard functions
        createActions();
        createMenus();
        createToolBars();
        createStatusBar();
        createDockWindows();
        showMaximized();
    }

    //****************************************************************************/
    QtResourceMain::~QtResourceMain(void)
    {
    }

    //****************************************************************************/
    QVector<QtResourceInfo*>& QtResourceMain::getResources (void)
    {
        // Delegate to mSourcesDockWidget
        return mSourcesDockWidget->getResources();
    }

    //****************************************************************************/
    void QtResourceMain::setResources (const QVector<QtResourceInfo*>& resources)
    {
        // Delegate to mAssetsDockWidget
        mAssetsDockWidget->setResources(resources);

        // Delegate to mSourcesDockWidget
        mSourcesDockWidget->setResources(resources);
        mSelectedFileName = "";
    }

    //****************************************************************************/
    void QtResourceMain::addMaterial(const QString& baseNameJson,
                                     const QString& fullNameJson,
                                     const QString& baseNameThumb,
                                     EditorHlmsTypes type)
    {
        if (mSourcesDockWidget->addMaterial(baseNameJson, fullNameJson, baseNameThumb, type))
            mAssetsDockWidget->addMaterial(baseNameJson, fullNameJson, baseNameThumb, type);
    }

    //****************************************************************************/
    void QtResourceMain::initResourceTree(void)
    {
        mSourcesDockWidget->initializeResourceTree();
    }

    //****************************************************************************/
    void QtResourceMain::closeEvent(QCloseEvent* event)
    {
        mIsClosing = true;
    }

    //****************************************************************************/
    void QtResourceMain::createActions(void)
    {
    }

    //****************************************************************************/
    void QtResourceMain::createMenus(void)
    {
    }

    //****************************************************************************/
    void QtResourceMain::createToolBars(void)
    {
    }

    //****************************************************************************/
    void QtResourceMain::createStatusBar(void)
    {
    }

    //****************************************************************************/
    void QtResourceMain::createDockWindows(void)
    {
        // Sources (tree)
        mSourcesDockWidget = new QtSourcesDockWidget(mIconDir, QString("Sources"), this);
        connect(mSourcesDockWidget, SIGNAL(resourceSelected(int,int,int,const QString&,const QString&)), this, SLOT(handleResourceSelected(int,int,int,const QString&,const QString&)));
        connect(mSourcesDockWidget, SIGNAL(resourceDoubleClicked(int,int,int,QString,QString)), this, SLOT(handleResourceDoubleClicked(int,int,int,const QString&,const QString&)));
        connect(mSourcesDockWidget, SIGNAL(resourceAdded(int,int,int,const QString&,const QString&)), this, SLOT(handleResourceAdded(int,int,int,const QString&,const QString&)));
        connect(mSourcesDockWidget, SIGNAL(resourceDeleted(int,int,int,const QString&,const QString&)), this, SLOT(handleResourceDeleted(int,int,int,const QString&,const QString&)));
        connect(mSourcesDockWidget, SIGNAL(resourceSearched(QString)), this, SLOT(handleResourceSearched(QString)));
        connect(mSourcesDockWidget, SIGNAL(resourceSearchReset()), this, SLOT(handleResourceSearchReset()));
        addDockWidget(Qt::LeftDockWidgetArea, mSourcesDockWidget);

        // Assets
        mAssetsDockWidget = new QtAssetsDockWidget(mIconDir, QString("Assets"), this);
        connect(mAssetsDockWidget, SIGNAL(tabChanged(int)), this, SLOT(handleTabChanged(int)));
        connect(mAssetsDockWidget, SIGNAL(assetSelected(QString,QString)), this, SLOT(handleAssetSelected(QString,QString)));
        connect(mAssetsDockWidget, SIGNAL(assetDoubleClicked(QString,QString)), this, SLOT(handleAssetDoubleClicked(QString,QString)));
        connect(mAssetsDockWidget, SIGNAL(assetDeleted(QString,QString)), this, SLOT(handleAssetDeleted(QString,QString)));
        addDockWidget(Qt::RightDockWidgetArea, mAssetsDockWidget);

        // Determine width of mAssetsDockWidget
        mAssetsDockWidget->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Expanding);
        QRect rec = QApplication::desktop()->screenGeometry();
        mAssetsDockWidget->setMinimumWidth(0.45 * rec.width()); // Note that the parent is 0.7 * screenwidth
        mAssetsDockWidget->layout()->setSizeConstraint(QLayout::SetMinimumSize);
    }

    //****************************************************************************/
    const QString& QtResourceMain::getSelectedFullQualifiedName(void)
    {
        return mSourcesDockWidget->getSelectedFullQualifiedName();
    }

    //****************************************************************************/
    void QtResourceMain::update(void)
    {
    }

    //****************************************************************************/
    void QtResourceMain::handleResourceSelected(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
    {
        // Select the appropriate tab, based on the provided information
        mAssetsDockWidget->selectTab(toplevelId, parentId, resourceId, name, baseName); // activate the corresponding tab
        mAssetsDockWidget->setSelectThumb(toplevelId, baseName); // highlight the thumb
        mSelectedFileName = "";
    }

    //****************************************************************************/
    void QtResourceMain::handleResourceDoubleClicked(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
    {
        if (fileExist(name))
        {
            emit jSonFileSelectedToProcess(name);
        }
        else
        {
            QMessageBox::StandardButton reply = fileDoesNotExistsWarning(name);
            if (reply == QMessageBox::Yes)
            {
                mSourcesDockWidget->deleteAssetQuiet(baseName);
                mAssetsDockWidget->deleteAsset(toplevelId, baseName, false);
                mSelectedFileName = "";
            }
        }
    }

    //****************************************************************************/
    void QtResourceMain::handleResourceAdded(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
    {
        // Add name to the mAssetsDockWidget
        mAssetsDockWidget->addAsset(toplevelId, parentId, resourceId, name, baseName);
        mSelectedFileName = name;
    }

    //****************************************************************************/
    void QtResourceMain::handleResourceDeleted(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
    {
        // Delete name from mAssetsDockWidget
        mAssetsDockWidget->deleteAsset(toplevelId, name, baseName);
        mSelectedFileName = "";
    }

    //****************************************************************************/
    void QtResourceMain::handleResourceSearched(const QString& searchPattern)
    {
        // Apply filtering to mAssetsDockWidget
        mAssetsDockWidget->filter(searchPattern);
        mSelectedFileName = "";
    }

    //****************************************************************************/
    void QtResourceMain::handleResourceSearchReset(void)
    {
        // Reset the filtering in mAssetsDockWidget
        mAssetsDockWidget->resetFilter();
        mSelectedFileName = "";
    }

    //****************************************************************************/
    void QtResourceMain::handleTabChanged(int toplevelId)
    {
        // Set the correct toplevel group in mSourcesDockWidget, based on the selected tab
        mSourcesDockWidget->selectTopLevel(toplevelId);
        mSelectedFileName = "";
    }

    //****************************************************************************/
    void QtResourceMain::handleAssetDeleted(const QString& name, const QString& baseName)
    {
        // Note, that name and baseName are related to thumb images
        mSourcesDockWidget->deleteAssetQuiet(baseName);
        mSelectedFileName = "";
    }

    //****************************************************************************/
    void QtResourceMain::handleAssetSelected(const QString& name, const QString& baseName)
    {
        // Note, that name and baseName are related to thumb images
        mSelectedFileName = mSourcesDockWidget->setSelectAssetQuiet(baseName);
    }

    //****************************************************************************/
    void QtResourceMain::handleAssetDoubleClicked(const QString& name, const QString& baseName)
    {
        // Note, that name and baseName are related to thumb images
        mSelectedFileName = mSourcesDockWidget->doubleClicked(baseName);
        if(fileExist(mSelectedFileName))
        {
            emit jSonFileSelectedToProcess(mSelectedFileName);
        }
        else
        {
            QMessageBox::StandardButton reply = fileDoesNotExistsWarning(mSelectedFileName);
            if (reply == QMessageBox::Yes)
            {
                mSourcesDockWidget->deleteAssetQuiet(baseName);
                mAssetsDockWidget->deleteAsset(baseName, false);
                mSelectedFileName = "";
            }
        }
    }

    //****************************************************************************/
    QMessageBox::StandardButton QtResourceMain::fileDoesNotExistsWarning(const QString& fileName)
    {
        return QMessageBox::question(0,
                                     "Warning",
                                     fileName + QString(" does not exist. Remove it from the material browser?"),
                                     QMessageBox::Yes|QMessageBox::No);
    }
}
