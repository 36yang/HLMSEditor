/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "tool_resourcewidget.h"
#include "tool_resourcewidget_sources.h"

namespace Magus
{
    //****************************************************************************/
    QtSourcesDockWidget::QtSourcesDockWidget(const QString& iconDir, const QString& title, QMainWindow* parent, Qt::WindowFlags flags) :
        QDockWidget (title, parent, flags),
        mParent(parent)
    {
        mIconDir = iconDir;
        mEmptyString = "";
        mResourceTreeWidget = new Magus::QtResourceTreeWidget(iconDir);
        mResourceTreeWidget->setCreateTopLevelGroupContextMenuItemEnabled(false);
        mResourceTreeWidget->setDeleteTopLevelGroupEnabled(false);
        mResourceTreeWidget->setTopLevelGroupItemEditable(false);
        mResourceTreeWidget->setSubLevelGroupItemEditable(true);
        mResourceTreeWidget->setCreateAssetContextMenuItemEnabled(false);
        mResourceTreeWidget->setAssetItemEditable(false);
        mResourceTreeWidget->setDeleteResourceContextMenuItemEnabled(true);
        mResourceTreeWidget->setImportAssetContextMenuItemEnabled(false);
        mResourceTreeWidget->setDuplicateAssetContextMenuItemEnabled(false);
        mResourceTreeWidget->setInheritSubGroupIconFromParent(false);

        // Listen to events.
        // Note, that although the 'create asset' context menu is disabled, the QtSourcesDockWidget must still handle the 'resourceAdded'
        // signal, because it is also emitted when a subgroup is created in the mResourceTreeWidget; the subgroup must be added to
        // mSourceInfo after creation, to be able to recursively delete any assets resided in subgroups (these assets must also be
        // properly deleted from the QtAssetsDockWidget).
        connect(mResourceTreeWidget, SIGNAL(resourceSelected(int)), this, SLOT(handleResourceSelected(int)));
        connect(mResourceTreeWidget, SIGNAL(resourceAdded(int)), this, SLOT(handleResourceAdded(int)));
        connect(mResourceTreeWidget, SIGNAL(resourceDeleted(int)), this, SLOT(handleResourceDeleted(int)));
        connect(mResourceTreeWidget, SIGNAL(resourceMoved(int)), this, SLOT(handleResourceMoved(int)));
        connect(mResourceTreeWidget, SIGNAL(resourceSearched(QString)), this, SLOT(handleResourceSearched(QString)));
        connect(mResourceTreeWidget, SIGNAL(resourceSearchReset()), this, SLOT(handleResourceSearchReset()));
        mInnerMain = new QMainWindow();
        mInnerMain->setCentralWidget(mResourceTreeWidget);
        setWidget(mInnerMain);
        QWidget* oldTitleBar = titleBarWidget();
        setTitleBarWidget(new QWidget());
        delete oldTitleBar;

        // Add toplevel groups
        initializeResourceTree();
    }

    //****************************************************************************/
    void QtSourcesDockWidget::initializeResourceTree (void)
    {
        // Initialize; add toplevel groups to the mResourceTreeWidget up front
        QtSourcesInfo info;

        // HLMS PBS
        mResourceTreeWidget->addResource (TOOL_SOURCES_LEVEL_X000_PBS, TOOL_SOURCES_LEVEL_X000_PBS, 0, QString("PBS"), QString(""), TOOL_RESOURCE_ICON_PBS);
        info.toplevelId = TOOL_SOURCES_LEVEL_X000_PBS;
        info.resourceId = TOOL_SOURCES_LEVEL_X000_PBS;
        info.parentId = 0;
        info.fileName = QString("PBS");
        info.baseName = info.fileName;
        info.filter = TOOL_SOURCES_FORMAT_PBS;
        info.baseNameThumb = ICON_PBS_DATABLOCK;
        mSourceInfo[TOOL_SOURCES_LEVEL_X000_PBS] = info;

        // HLMS UNLIT
        mResourceTreeWidget->addResource (TOOL_SOURCES_LEVEL_X000_UNLIT, TOOL_SOURCES_LEVEL_X000_UNLIT, 0, QString("Unlit"), QString(""), TOOL_RESOURCE_ICON_UNLIT);
        info.toplevelId = TOOL_SOURCES_LEVEL_X000_UNLIT;
        info.resourceId = TOOL_SOURCES_LEVEL_X000_UNLIT;
        info.parentId = 0;
        info.fileName = QString("Unlit");
        info.baseName = info.fileName;
        info.filter = TOOL_SOURCES_FORMAT_UNLIT;
        info.baseNameThumb = ICON_UNLIT_DATABLOCK;
        mSourceInfo[TOOL_SOURCES_LEVEL_X000_UNLIT] = info;

        // Set 'PBS' selected
        mResourceTreeWidget->selectResource(TOOL_SOURCES_LEVEL_X000_PBS, false);
    }

    //****************************************************************************/
    QtSourcesDockWidget::~QtSourcesDockWidget(void)
    {
    }

    //****************************************************************************/
    QVector<QtResourceInfo*>& QtSourcesDockWidget::getResources (void)
    {
        // Delegate to mResourceTreeWidget; this is the component that actually retrieves the data
        return mResourceTreeWidget->getResources();
    }

    //****************************************************************************/
    void QtSourcesDockWidget::setResources(const QVector<QtResourceInfo*>& resources)
    {
        // Add resources to the resource tree
        mResourceTreeWidget->setResources(resources, true);

        // Iterate again through the list to make sure that the thumb info is set
        QVectorIterator<QtResourceInfo*> it(resources);
        it.toFront();
        QtResourceInfo* resourceInfo;
        while (it.hasNext())
        {
            resourceInfo = it.next();
            QtSourcesInfo info;
            info.toplevelId = resourceInfo->topLevelId;
            info.resourceId = resourceInfo->resourceId;
            info.parentId = resourceInfo->parentId;
            info.fileName = resourceInfo->fullQualifiedName;
            info.baseName = resourceInfo->resourceName;
            info.baseNameThumb = resourceInfo->resourceName + QString (".png"); // Do not forget
            mSourceInfo[resourceInfo->resourceId] = info;
        }

        mResourceTreeWidget->expandAll();
    }

    //****************************************************************************/
    const QString& QtSourcesDockWidget::getSelectedFullQualifiedName(void)
    {
        QTreeWidgetItem* item = mResourceTreeWidget->getSelectedResourceItem ();
        if (item)
        {
            if (mResourceTreeWidget->isItemAsset(item))
                return mResourceTreeWidget->getFullQualifiedNameFromItem(item);
        }

        return mEmptyString;
    }

    //****************************************************************************/
    bool QtSourcesDockWidget::addMaterial(const QString& baseNameJson,
                                          const QString& fullNameJson,
                                          const QString& baseNameThumb,
                                          EditorHlmsTypes type)
    {
        switch (type)
        {
            case HLMS_PBS:
            {
                return addAssetQuiet(TOOL_SOURCES_LEVEL_X000_PBS, fullNameJson, baseNameJson, baseNameThumb);
            }
            break;

            case HLMS_UNLIT:
            {
                return addAssetQuiet(TOOL_SOURCES_LEVEL_X000_UNLIT, fullNameJson, baseNameJson, baseNameThumb);
            }
            break;
        }
    }

    //****************************************************************************/
    void QtSourcesDockWidget::selectTopLevel(int toplevelId)
    {
        mResourceTreeWidget->selectResource(toplevelId, false);
    }

    //****************************************************************************/
    void QtSourcesDockWidget::clearContent(void)
    {
        mResourceTreeWidget->clear();
        initializeResourceTree();
    }

    //****************************************************************************/
    bool QtSourcesDockWidget::addAssetQuiet(int toplevelId,
                                            const QString& name,
                                            const QString& baseName,
                                            const QString& baseNameThumb)
    {
        if (isResourceExisting(baseName))
            return false;

        // Suppress the signal that a resource was added, otherwise the signal causes the asset to
        // be added to the asset widget
        int resourceId = mResourceTreeWidget->addResource(toplevelId, baseName, name, QString(""), true, true);
        mResourceTreeWidget->expand(toplevelId);

        // Also add it to mSourceInfo
        QtSourcesInfo info;
        info.toplevelId = toplevelId;
        info.resourceId = resourceId;
        info.parentId = toplevelId;
        info.fileName = name;
        info.baseName = baseName;
        info.baseNameThumb = baseNameThumb;
        mSourceInfo[resourceId] = info;
        return true;
    }

    //****************************************************************************/
    const QString& QtSourcesDockWidget::setSelectAssetQuiet(const QString& baseNameThumb)
    {
        int id = getResourceId(baseNameThumb);
        if (id != -1)
        {
            mResourceTreeWidget->selectResource(id, false);
            return mSourceInfo[id].fileName;
        }

        return mEmptyString;
    }

    //****************************************************************************/
    const QString& QtSourcesDockWidget::doubleClicked(const QString& baseNameThumb)
    {
        int id = getResourceId(baseNameThumb);
        if (id != -1)
        {
            return mSourceInfo[id].fileName;
        }

        return mEmptyString;
    }

    //****************************************************************************/
    void QtSourcesDockWidget::deleteAssetQuiet(int toplevelId, const QString& name, const QString& baseName)
    {
        mResourceTreeWidget->deleteResource(toplevelId, name, true);
    }

    //****************************************************************************/
    void QtSourcesDockWidget::deleteAssetQuiet(const QString& baseNameThumb)
    {
        int id = getResourceId(baseNameThumb);
        if (id != -1)
        {
            QtSourcesInfo info = mSourceInfo[id];
            mResourceTreeWidget->deleteResource(info.toplevelId, info.fileName, true);
        }
    }

    //****************************************************************************/
    void QtSourcesDockWidget::handleResourceSelected(int resourceId)
    {
        // Determine which type is selected
        QMap<int, QtSourcesInfo>::iterator it = mSourceInfo.find(resourceId);
        if (it != mSourceInfo.end())
        {
            QtSourcesInfo info = it.value();
            mResourceTreeWidget->setSubgroupIconName(determineSubgroupIcon(info.toplevelId));
            emit resourceSelected(info.toplevelId, info.parentId, info.resourceId, info.fileName, info.baseNameThumb);
            //QMessageBox::information(0, QString("this"), QVariant(info.toplevelId).toString()); // test
        }
    }

    //****************************************************************************/
    void QtSourcesDockWidget::handleResourceAdded(int resourceId)
    {
        QtSourcesInfo info;
        int toplevelId = mResourceTreeWidget->getToplevelParentId(resourceId);
        QString name = mResourceTreeWidget->getResourceName(resourceId);
        QString fullQualifiedName = mResourceTreeWidget->getFullQualifiedName(resourceId);
        info.toplevelId = toplevelId;
        info.resourceId = resourceId;
        info.parentId = mResourceTreeWidget->getParentId(resourceId);
        info.fileName = fullQualifiedName;
        info.baseName = name;
        mSourceInfo[resourceId] = info;

        // Emit file info to QtResourceMain, because the QtAssetsDockWidget must be appended with the new files
        // Do this only in case the resource is an asset
        if (mResourceTreeWidget->isResourceAsset(resourceId))
            emit resourceAdded(info.toplevelId, info.parentId, info.resourceId, info.fileName, info.baseName);
    }

    //****************************************************************************/
    void QtSourcesDockWidget::handleResourceDeleted(int resourceId)
    {
        // Do not handle resources with resourceId = 0
        if (resourceId == 0)
            return;

        // Get all the underlying assets (filenames) + delete them from the mSourceInfo
        foreach(QtSourcesInfo info, mSourceInfo)
        {
            if (info.parentId == resourceId)
                handleResourceDeleted(info.resourceId);
            else if (info.resourceId == resourceId)
            {
                // Delete from mSourceInfo (emit with thumb texture parameters)
                emit resourceDeleted(info.toplevelId,
                                     info.parentId,
                                     info.resourceId,
                                     THUMBS_PATH.c_str() + info.baseNameThumb,
                                     info.baseNameThumb);
                mSourceInfo.remove(resourceId);
            }
        }
    }

    //****************************************************************************/
    void QtSourcesDockWidget::handleResourceMoved(int resourceId)
    {
        // Search the info object
        QtSourcesInfo info;
        QMap<int, QtSourcesInfo>::iterator it = mSourceInfo.find(resourceId);
        if (it == mSourceInfo.end())
            return;

        // Update the parentId and toplevelId (Although in this version it is not possible to move to a different toplevel)
        // Emitting again is not needed, because nothing changed in the assets widget
        info = it.value();
        info.toplevelId = mResourceTreeWidget->getToplevelParentId(resourceId);
        info.parentId = mResourceTreeWidget->getParentId(resourceId);
        mSourceInfo[resourceId] = info; // Overwrite existing one
    }

    //****************************************************************************/
    void QtSourcesDockWidget::handleResourceSearched(const QString& searchPattern)
    {
        // Signal
        emit resourceSearched(searchPattern);
    }

    //****************************************************************************/
    void QtSourcesDockWidget::handleResourceSearchReset(void)
    {
        // Signal
        emit resourceSearchReset();
    }
    //****************************************************************************/
    bool QtSourcesDockWidget::isResourceExisting(const QString& baseName)
    {
        QMap<int, QtSourcesInfo>::iterator iter;
        QMap<int, QtSourcesInfo>::iterator iterStart = mSourceInfo.begin();
        QMap<int, QtSourcesInfo>::iterator iterEnd = mSourceInfo.end();
        for (iter = iterStart; iter != iterEnd; ++iter)
        {
            QtSourcesInfo info = iter.value();
            if (baseName == info.baseName)
                return true;
        }

        return false;
    }
    //****************************************************************************/
    int QtSourcesDockWidget::getResourceId(const QString& baseNameThumb)
    {
        QMap<int, QtSourcesInfo>::iterator iter;
        QMap<int, QtSourcesInfo>::iterator iterStart = mSourceInfo.begin();
        QMap<int, QtSourcesInfo>::iterator iterEnd = mSourceInfo.end();
        for (iter = iterStart; iter != iterEnd; ++iter)
        {
            QtSourcesInfo info = iter.value();
            if (baseNameThumb == info.baseNameThumb)
                return info.resourceId;
        }

        return -1;
    }

    //****************************************************************************/
    const QString& QtSourcesDockWidget::determineSubgroupIcon(int toplevelId)
    {
        if (toplevelId == TOOL_SOURCES_LEVEL_X000_PBS)
            return TOOL_RESOURCE_ICON_SMALL_PBS;
        else if (toplevelId == TOOL_SOURCES_LEVEL_X000_UNLIT)
            return TOOL_RESOURCE_ICON_SMALL_UNLIT;
        else
            return QString("");
    }
}


