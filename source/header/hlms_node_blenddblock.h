/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef HLMS_NODE_BLENDBLOCK_H
#define HLMS_NODE_BLENDBLOCK_H

#include <QWidget>
#include "node_node.h"

QT_BEGIN_NAMESPACE

QT_END_NAMESPACE

/****************************************************************************
 * ...
 ***************************************************************************/
class HlmsNodeBlendblock : public Magus::QtNode
{
    public:
        HlmsNodeBlendblock(QString title, QGraphicsItem* parent = 0);
        virtual ~HlmsNodeBlendblock(void);

        // Getters
        bool getBlendblockEnabled (void) const {return mBlendblockEnabled;}
        bool getAlphaToCoverageEnabled (void) const {return mAlphaToCoverageEnabled;}
        unsigned int getBlendChannelMask (void) const {return mBlendChannelMask;}
        bool getTransparent (void) const {return mTransparent;}
        bool getSeparateBlend (void) const {return mSeparateBlend;}
        unsigned int getSourceBlendFactor (void) const {return mSourceBlendFactor;}
        unsigned int getDestBlendFactor (void) const {return mDestBlendFactor;}
        unsigned int getSourceBlendFactorAlpha (void) const {return mSourceBlendFactorAlpha;}
        unsigned int getDestBlendFactorAlpha (void) const {return mDestBlendFactorAlpha;}
        unsigned int getBlendOperation (void) const {return mBlendOperation;}
        unsigned int getBlendOperationAlpha (void) const {return mBlendOperationAlpha;}

        // Setters
        void setBlendblockEnabled (bool blendblockEnabled) {mBlendblockEnabled = blendblockEnabled;}
        void setAlphaToCoverageEnabled (bool alphaToCoverageEnabled) {mAlphaToCoverageEnabled = alphaToCoverageEnabled;}
        void setBlendChannelMask (unsigned int blendChannelMask) {mBlendChannelMask = blendChannelMask;}
        void setTransparent (bool transparent) {mTransparent = transparent;}
        void setSeparateBlend (bool separateBlend) {mSeparateBlend = separateBlend;}
        void setSourceBlendFactor (unsigned int sourceBlendFactor) {mSourceBlendFactor = sourceBlendFactor;}
        void setDestBlendFactor (unsigned int destBlendFactor) {mDestBlendFactor = destBlendFactor;}
        void setSourceBlendFactorAlpha (unsigned int sourceBlendFactorAlpha) {mSourceBlendFactorAlpha = sourceBlendFactorAlpha;}
        void setDestBlendFactorAlpha (unsigned int destBlendFactorAlpha) {mDestBlendFactorAlpha = destBlendFactorAlpha;}
        void setBlendOperation (unsigned int blendOperation) {mBlendOperation = blendOperation;}
        void setBlendOperationAlpha (unsigned int blendOperationAlpha) {mBlendOperationAlpha = blendOperationAlpha;}

    private:
        bool mBlendblockEnabled;
        bool mAlphaToCoverageEnabled;
        unsigned int mBlendChannelMask;
        bool mTransparent;
        bool mSeparateBlend;
        unsigned int mSourceBlendFactor;
        unsigned int mDestBlendFactor;
        unsigned int mSourceBlendFactorAlpha;
        unsigned int mDestBlendFactorAlpha;
        unsigned int mBlendOperation;
        unsigned int mBlendOperationAlpha;
};

#endif
