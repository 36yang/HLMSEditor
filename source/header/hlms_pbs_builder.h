/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef HLMS_PBS_BUILDER_H
#define HLMS_PBS_BUILDER_H

#include "ogre3_renderman.h"
#include "hlms_builder.h"
#include "hlms_node_pbs_datablock.h"
#include "hlms_node_samplerblock.h"
#include "OgreHlmsPbs.h"
#include "OgreHlmsPbsDatablock.h"
#include "node_editorwidget.h"

/****************************************************************************
 This class is used to generate a HlmsPbsDatablock from a node structure or
 creates a node structure from a HlmsPbsDatablock
 ***************************************************************************/
class HlmsPbsBuilder : public HlmsBuilder
{
	public:
        HlmsPbsBuilder(Magus::QtNodeEditor* nodeEditor);
        ~HlmsPbsBuilder(void);

        // Create a HlmsPbsDatablock and return the pointer.
        // Note:
        // In addition, this function sets the datablock in the current (ogre) item of the renderwindow.
        // Preferably, this should be done in the NodeEditorDockWidget (which uses the HlmsPbsBuilder),
        // but the createPbsDatablock function also removes the current datablock from the item,
        // so for convenience it also sets the new datablock.
        Ogre::HlmsPbsDatablock* createPbsDatablock (Magus::OgreManager* ogreManager,
                                                    QString latestDatablockName,
                                                    HlmsNodePbsDatablock* pbsnode);

        // Delete a Hlms Pbs datablock with a certain name
        void deletePbsDatablock (Magus::OgreManager* ogreManager, const QString& datablockName);

        // Create a node structure (HlmsNodePbsDatablock, HlmsNodeSamplerblock, HlmsNodeBlendblock and
        // HlmsNodeMacroblock) from a given datablockName (this corresponding datablock name is retrieved
        // from the Ogre::HlmsPbs).
        HlmsNodePbsDatablock* createPbsNodeStructure (Magus::OgreManager* ogreManager,
                                                      const QString& datablockName);

        // Create a Pbs node and add it to the node editor canvas
        HlmsNodePbsDatablock* createPbsNode(void);

        // Create a Sampler node and add it to the node editor canvas
        HlmsNodeSamplerblock* createSamplerNode(void);

        // Create a Macro node and add it to the node editor canvas
        HlmsNodeMacroblock* createMacroNode(void);

        // Create a Blend node and add it to the node editor canvas
        HlmsNodeBlendblock* createBlendNode(void);

        // Connect PBS node and Sampler node in the editor canvas
        void connectNodes(HlmsNodePbsDatablock* pbsnode,
                          HlmsNodeSamplerblock* samplerNode);

        // Connect PBS node and Macro node in the editor canvas
        void connectNodes(HlmsNodePbsDatablock* pbsnode,
                          HlmsNodeMacroblock* macronode);

        // Connect PBS node and Blend node in the editor canvas
        void connectNodes(HlmsNodePbsDatablock* pbsnode,
                          HlmsNodeBlendblock* blendnode);
	private:
        Magus::QtNodeEditor* mNodeEditor;

        // Some private functions
        unsigned int getIndexFromTextureType(Ogre::PbsTextureTypes textureType);
        Ogre::PbsTextureTypes getPbsTextureTypeFromSamplerNode(HlmsNodeSamplerblock* samplerNode);
        Ogre::HlmsTextureManager::TextureMapType getTextureMapTypeFromPbsTextureTypes(Ogre::PbsTextureTypes textureType);
        Ogre::HlmsTextureManager::TextureMapType getTextureMapTypeFromSamplerNode(HlmsNodeSamplerblock* samplerNode);

        // Create a Sampler node from a HlmsPbsDatablock if that datablock contains a texture of a certain textureType
        // This function makes use of the createSamplerNode function without the arguments
        HlmsNodeSamplerblock* createSamplerNode(Ogre::HlmsPbsDatablock* datablock,
                                                HlmsNodePbsDatablock* pbsnode,
                                                Ogre::PbsTextureTypes textureType);

        // The pbsnode is enriched with values from a given datablock
        void enrichPbsNode(HlmsNodePbsDatablock* pbsnode,
                           Ogre::HlmsPbsDatablock* datablock);

        // The datablock is enriched with values from a given pbsnode
        void enrichPbsDatablock(Ogre::HlmsPbsDatablock* datablock,
                                HlmsNodePbsDatablock* pbsnode);

        // The samplerblock is enriched with values from a sampler node
        void enrichSamplerblock (Ogre::HlmsPbsDatablock* datablock,
                                 Ogre::HlmsSamplerblock* samplerblock,
                                 HlmsNodeSamplerblock* samplernode);

        // The sampler node is enriched with values from a datablock and samplerblock
        void enrichSamplerNode (Magus::OgreManager* ogreManager,
                                HlmsNodeSamplerblock* samplernode,
                                Ogre::HlmsPbsDatablock* datablock,
                                Ogre::PbsTextureTypes textureType);

        Ogre::PbsBrdf::PbsBrdf getBrdfFromIndex (unsigned int index);
        unsigned int getIndexFromBlendMode (Ogre::PbsBlendModes blendMode);
        Ogre::PbsBlendModes getBlendModeFromIndex (unsigned int index);
        unsigned int getDetailMapIndexFromTextureType (Ogre::PbsTextureTypes textureType);
        unsigned int getDetailNormalMapIndexFromTextureType (Ogre::PbsTextureTypes textureType);
};

#endif

