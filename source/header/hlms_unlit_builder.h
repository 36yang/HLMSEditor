/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef HLMS_UNLIT_BUILDER_H
#define HLMS_UNLIT_BUILDER_H

#include "ogre3_renderman.h"
#include "hlms_builder.h"
#include "hlms_node_unlit_datablock.h"
#include "hlms_node_samplerblock.h"
#include "hlms_node_macroblock.h"
#include "hlms_node_blenddblock.h"
#include "OgreHlmsManager.h"
#include "OgreHlmsUnlit.h"
#include "OgreHlmsUnlitDatablock.h"
#include "node_editorwidget.h"

/****************************************************************************
 This class is used to generate a HlmsUnlitDatablock from a node structure or
 creates a node structure from a HlmsUnlitDatablock
 ***************************************************************************/
class HlmsUnlitBuilder : public HlmsBuilder
{
	public:
        HlmsUnlitBuilder(Magus::QtNodeEditor* nodeEditor);
        ~HlmsUnlitBuilder(void);

        // Create a Hlms Unlit datablock
        Ogre::HlmsUnlitDatablock* createUnlitDatablock (Magus::OgreManager* ogreManager,
                                                        HlmsNodeUnlitDatablock* unlitnode);

        // Create a node structure (HlmsNodeUnlitDatablock, HlmsNodeSamplerblock, HlmsNodeBlendblock and
        // HlmsNodeMacroblock) from a given datablockName (this corresponding datablock name is retrieved
        // from the Ogre::HlmsUnlit).
        HlmsNodeUnlitDatablock* createUnlitNodeStructure (Magus::OgreManager* ogreManager,
                                                          const QString& datablockName);

        // Delete a Hlms Unlit datablock with a certain name
        void deleteUnlitDatablock (Magus::OgreManager* ogreManager, const QString& datablockName);

        // Create an Unlit node and add it to the node editor canvas
        HlmsNodeUnlitDatablock* createUnlitNode(void);

        // Enrich the unlit node with sampler nodes
        void createSamplerNodes (Magus::OgreManager* ogreManager,
                                 HlmsNodeUnlitDatablock* unlitnode,
                                 Ogre::HlmsUnlitDatablock* datablock);

        // Set the Unlit node to an initial position
        void repositionUnlitNode(HlmsNodeUnlitDatablock* unlitnode);

        // Connect Unlit node and Sampler node in the editor canvas
        void connectNodes(HlmsNodeUnlitDatablock* unlitnode,
                          HlmsNodeSamplerblock* samplerNode);

        void connectNodes(HlmsNodeUnlitDatablock* unlitnode,
                          HlmsNodeMacroblock* macronode);

        void connectNodes(HlmsNodeUnlitDatablock* unlitnode,
                          HlmsNodeBlendblock* blendnode);

        // Some convenience functions (eg used for plugins; that is the reason std and Ogre types are used)
        // Get the alias name from an unlit datablock
        const Ogre::String& getTextureName(Magus::OgreManager* ogreManager,
                                           Ogre::HlmsUnlitDatablock* unlitDatablock,
                                           Ogre::uint8 textureType);

        // Get all alias names from all currently available unlit datablocks
        void getTexturesFromAvailableDatablocks(Magus::OgreManager* ogreManager, std::vector<Ogre::String>* v);

    private:
        Magus::QtNodeEditor* mNodeEditor;
        Ogre::String mTempOgreString;

        // Some private functions
        // The datablock is enriched with values from a given pbsnode
        void enrichUnlitDatablock(Ogre::HlmsUnlitDatablock* datablock,
                                  HlmsNodeUnlitDatablock* unlitnode);

        // The ublit node is enriched with values from a given unlit datablock
        void enrichUnlitNode(HlmsNodeUnlitDatablock* unlitnode,
                             Ogre::HlmsUnlitDatablock* datablock);

        // The samplerblock is enriched with values from a sampler node
        void enrichSamplerblock (Ogre::HlmsUnlitDatablock* datablock,
                                 Ogre::HlmsSamplerblock* samplerblock,
                                 HlmsNodeSamplerblock* samplernode);

        // The sampler node is enriched with values from a sampler block
        void enrichSamplerNode (Magus::OgreManager* ogreManager,
                                HlmsNodeSamplerblock* samplernode,
                                const Ogre::HlmsSamplerblock* samplerblock,
                                Ogre::HlmsUnlitDatablock* datablock,
                                Ogre::uint8 textType);


        unsigned int getIndexFromBlendMode (Ogre::UnlitBlendModes blendMode);
        Ogre::UnlitBlendModes getBlendModeFromIndex (unsigned int index);
};

#endif

