/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef PAINT_LAYER_H
#define PAINT_LAYER_H

#include "OgreRoot.h"
#include "OgreImage.h"
#include "OgreTexture.h"
#include "OgreMath.h"
#include "OgreVector2.h"
#include "OgreColourValue.h"
#include "OgreTexture.h"
#include "OgrePixelBox.h"
#include "OgreItem.h"
#include "OgreHlmsPbsDatablock.h"
#include "OgreHlmsDatablock.h"
#include "OgreHardwarePixelBuffer.h"
#include "texturelayer.h"

/****************************************************************************
 This class contains functions used by the Hlms editor painter window. A
 paintlayer represents a layer, assigned to a certain texture of a Hlms
 material. E.g. A PaintLayer can be assinged to a diffuse texture. The paint
 characteristics are set in the PaintLayer object.

 Each Hlms material can have [0..max textures] PaintLayer assigned to it.
 Layers can be painted individually, but painting can also be done at once
 (a mouse paint stroke involves multiple PaintLayer objects).
 ***************************************************************************/

class PaintLayer
{
	public:
        enum PaintEffects
        {
            PAINT_EFFECT_COLOR, /// Paint with color
            PAINT_EFFECT_ALPHA, /// Paint with alpha
            PAINT_EFFECT_NORMAL_RAISED, /// Paint on a normal map and apply a raising effect; only used for normal maps
            PAINT_EFFECT_NORMAL_LOWERED /// Paint on a normal map and apply a lowering effect; only used for normal maps
        };

        enum PaintOverflowTypes
        {
            PAINT_OVERFLOW_IGNORE, /// If the brush exceeds the texture areas on which is painted, the overflow is ignored
            PAINT_OVERFLOW_TO_OPPOSITE_UV, /// If the brush exceeds the texture areas on which is painted, the overflow is continued on the opposite side
            PAINT_OVERFLOW_TO_OPPOSITE_CORNER  /// If the brush exceeds the texture areas on which is painted, the overflow is continued on the opposite corner
        };

        PaintLayer(void);
        ~PaintLayer(void);

        /* Enable or disable the layer for painting
         */
        void enable(bool enabled);

        /* Apply the paint effect.
         */
        void paint(float u, float v);

        /* Set the reference to the texture.
         */
        void setTextureLayer (TextureLayer* textureLayer);

        /* Set the name of the brush used for painting.
         */
        void setBrush (const Ogre::String& brushFileName);

        /* Set scale of the brush.
         */
        void setBrushScale ( float brushScale);

        /* Set the paint effect.
         */
        void setPaintEffect (PaintEffects paintEffect);

        /* Set colour used for painting.
         */
        void setPaintColour (const Ogre::ColourValue& colourValue);

        private:
            bool mEnabled;                                  // If enabled, the layer is painted, otherwise it is skipped
            Ogre::Image mTextureOnWhichIsPaintedScaled;     // The same image, but scaled for applying to mipmaps
            Ogre::Image mBrush;                             // Image of the brush
            Ogre::String mBrushFileName;                    // Full qualified name of the brush file
            Ogre::PixelBox mPixelboxBrush;                  // Pixelbox of mBrush; for speed purposes, it is created when the brush is set
            size_t mBrushWidth;                             // Width of mBrush
            size_t mBrushHeight;                            // Height of mBrush
            size_t mHalfBrushWidth;                         // For efficient calculation
            size_t mHalfBrushWidthScaled;                   // For efficient calculation
            size_t mHalfBrushHeight;                        // For efficient calculation
            size_t mHalfBrushHeightScaled;                  // For efficient calculation
            float mBrushForce;                              // Factor that determines how must pressure is put on the brush; value between [0.0f, 1.0f].
            float mBrushScale;                              // Factor that scales the brush; value between [0.0f, 1.0f].
            Ogre::ColourValue mPaintColour;                 // The colour used for painting. Red, Green and Blue values are used when PAINT_EFFECT_COLOR is passed.
                                                            // Alpha value is used if PAINT_EFFECT_ALPHA is used.
            Ogre::ColourValue mFinalColour;                 // The calculated colour, based on mPaintColour and the brush, applied to the texture.
            PaintEffects mPaintEffect;                      // Type of paint effect.
            PaintOverflowTypes mPaintOverflow;              // Determine what happens if the brush exceeds the texture areas on which is painted.
            TextureLayer* mTextureLayer;                    // Reference to the texture (can be shared by other PaintLayers)
            size_t calculatedTexturePositionX;
            size_t calculatedTexturePositionY;
            float mAlpha;

            // Private functions
            size_t calculateTexturePositionX (float u, size_t brushPositionX);
            size_t calculateTexturePositionY (float v, size_t brushPositionY);
};

typedef std::vector<PaintLayer*> PaintLayers;

#endif

