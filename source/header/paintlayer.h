/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef PAINTER_UTILS_H
#define PAINTER_UTILS_H

#include "OgreRoot.h"
#include "OgreImage.h"
#include "OgreTexture.h"
#include "OgreMath.h"
#include "OgreVector2.h"
#include "OgreColourValue.h"
#include "OgreTexture.h"
#include "OgrePixelBox.h"
#include "OgreItem.h"
#include "OgreHlmsPbsDatablock.h"
#include "OgreHlmsDatablock.h"
#include "OgreHardwarePixelBuffer.h"

/****************************************************************************
 This class contains functions used by the Hlms editor painter window. A
 paintlayer represents a layer, assigned to a certain texture of a Hlms
 material. E.g. A PaintLayer can be assinged to a diffuse texture. The paint
 characteristics are set in the PaintLayer object.

 Each Hlms material can have [0..max textures] PaintLayer assigned to it.
 Layers can be painted individually, but painting can also be done at once
 (a mouse paint stroke involves multiple PaintLayer objects).
 ***************************************************************************/

class PaintLayer
{
    enum PaintEffects
    {
        PAINT_EFFECT_COLOR, /// Paint with color
        PAINT_EFFECT_ALPHA, /// Paint with alpha
        PAINT_EFFECT_NORMAL_RAISED, /// Paint on a normal map and apply a raising effect; only used for normal maps
        PAINT_EFFECT_NORMAL_LOWERED /// Paint on a normal map and apply a lowering effect; only used for normal maps
    };
    enum PaintOverflowTypes
    {
        PAINT_OVERFLOW_IGNORE, /// If the brush exceeds the texture areas on which is painted, the overflow is ignored
        PAINT_OVERFLOW_TO_OPPOSITE_UV, /// If the brush exceeds the texture areas on which is painted, the overflow is continued on the opposite side
        PAINT_OVERFLOW_TO_OPPOSITE_CORNER  /// If the brush exceeds the texture areas on which is painted, the overflow is continued on the opposite corner
    };

	public:
        PaintLayer(void);
        ~PaintLayer(void);

        /* Apply the paint effect.
         */
        void paint(float u, float v);

        /* Set the name of the (current) datablock. This is the datablock internally used for painting.
         * In addition, the textureType must be set.
         * textureFileName
         * Set full qualified filename of the texture, on which is painted
         */
        void setDatablockNameAndTexture (const Ogre::IdString& datablockName,
                                         Ogre::PbsTextureTypes textureType,
                                         const Ogre::String& textureFileName);

        /* Set the name of the brush used for painting.
         */
        void setBrush (const Ogre::String& brushFileName);

        private:
            Ogre::HlmsDatablock* mDatablock;                // The datablock used to paint on
            Ogre::HlmsPbsDatablock* mDatablockPbs;          // If the datablock is a Pbs, it is casted to a HlmsPbsDatablock*
            Ogre::TexturePtr mTexture;                      // The texture layer on which is painted
            Ogre::uint8 mNumMipMaps;                        // Number of mipmaps of mTexture (on the GPU)
            std::vector<Ogre::v1::HardwarePixelBuffer*> mBuffers; // Texture buffers; depends on number of mipmaps
            Ogre::Image mTextureOnWhichIsPainted;           // Contains a texture Image; this image is uploaded to the texture layer of the Hlms (on GPU), every time
                                                            // the applyPaintEffect() function is called. This basically updates the texture layer in the Pbs.
                                                            // Initially, textureOnWhichIsPainted is the same image from disk, also loaded in the Pbs.
                                                            // mTextureOnWhichIsPainted is changed while painting. Intermediate versions of mTextureOnWhichIsPainted
                                                            // are stored (example: texturename.png, texturename_01.png, texturename_02.png. texturename_03.png, ...)
                                                            // and can be used for 'undo'.
            Ogre::Image mTextureOnWhichIsPaintedScaled;     // The same image, but scaled for applying to mipmaps
            Ogre::String mTextureFileName;                  // Full qualified name of the texture file
            Ogre::PixelBox mPixelboxTextureOnWhichIsPainted;// Pixelbox of mTextureOnWhichIsPainted; for speed purposes, it is created when the texture is set
            Ogre::uint32 mTextureOnWhichIsPaintedWidth;     // Width of mTextureOnWhichIsPainted; must be the same as the width of mTexture
            Ogre::uint32 mTextureOnWhichIsPaintedHeight;    // Height of mTextureOnWhichIsPainted; must be the same as the height of mTexture
            bool mTextureOnWhichIsPaintedHasAlpha;          // Painting effect depends on the fact whether the texture has alpha enabled
            Ogre::Image mBrush;                             // Image of the brush
            Ogre::String mBrushFileName;                    // Full qualified name of the brush file
            Ogre::PixelBox mPixelboxBrush;                  // Pixelbox of mBrush; for speed purposes, it is created when the brush is set
            size_t mBrushWidth;                             // Width of mBrush
            size_t mBrushHeight;                            // Height of mBrush
            unsigned float mBrushForce;                     // Factor that determines how must pressure is put on the brush; value between [0.0f, 1.0f].
            Ogre::ColourValue mPaintColour;                 // The colour used for painting. Red, Green and Blue values are used when PAINT_EFFECT_COLOR is passed.
                                                            // Alpha value is used if PAINT_EFFECT_ALPHA is used.
            Ogre::ColourValue mFinalColour;                 // The calculated colour, based on mPaintColour and the brush, applied to the texture.
            PaintEffects mPaintEffect;                      // Type of paint effect.
            PaintOverflowTypes mPaintOverflow;              // Determine what happens if the brush exceeds the texture areas on which is painted.
            float mFractionTextureBrushWidth;               // Width texture / width brush
            float mFractionTextureBrushHeight;              // Height texture / height brush

            // Private functions
            size_t calculateTexturePositionX (float u, size_t brushPositionX);
            size_t calculateTexturePositionY (float v, size_t brushPositionY);
};

typedef std::vector<PaintLayer*> PaintLayers;

#endif

