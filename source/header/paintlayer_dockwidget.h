/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef PAINTLAYER_DOCKWIDGET_H
#define PAINTLAYER_DOCKWIDGET_H

#include <QtWidgets>
#include <QDockWidget>
#include <QColor>
#include <QVector2D>
#include "paintlayer_widget.h"

QT_BEGIN_NAMESPACE
class QDockWidget;
QT_END_NAMESPACE

class MainWindow;
class PaintLayerManager;

/****************************************************************************
 The PaintLayerDockWidget is a container to manage the PaintLayerManager and
 the PaintLayerWidget. The PaintLayerWidget is the actual widget that contains
 the table with layers/
 ***************************************************************************/
class PaintLayerDockWidget : public QDockWidget
{
    Q_OBJECT

    public:
        PaintLayerDockWidget(PaintLayerManager* paintLayerManager,
                             QString title,
                             MainWindow* parent,
                             Qt::WindowFlags flags = 0);
        ~PaintLayerDockWidget(void);

        /* Create a new paint layer, without settings. This is the same action as performed by the
         * contextmenu.
         */
        void createPaintLayer(void);

        /* Edit the selected paint layers This is the same action as performed by the
         * contextmenu.
         */
        void editSelectedPaintLayer(void);

        /* Delete the selected paint layers This is the same action as performed by the
         * contextmenu.
         */
        void deleteSelectedPaintLayer(void);

        /* When a new brush is selected, set it in the currently selected paintlayer
         */
        void setBrushInPaintLayer(const QString& name, const QString& baseName);

        /* Determines whether there is a current datablock.
         * It must be a Pbs, because Unlit painting is not very interesting (and therefor not supported)
         */
        bool currentDatablockExists(void);
        bool currentDatablockIsPbs(void);

        /* The function is called everytime a new Hlms material is created
         * The Paint Layers don't have any meaning for the new Hlms, so they can be deleted
         */
        void newHlmsCreated (void);

        /* Returns a list with available texture types. These are the texture types used by
         * the current hlms datablock.
         */
        QStringList getAvailableTextureTypes(void);

        /* Set/get a texture type in a PaintLayer.
         * Based on the texture type (and the datablock name), the texture is also searched and set in the PaintLayer.
         */
        void setTextureType (int layerId, const QString& textureType);
        const QString& getTextureType (int layerId);

        /* Set/get the paint effect type.
         */
        void setPaintEffect(int layerId, const QString& paintEffect);
        const QString& getPaintEffect(int layerId);

        /* Set/get the overflow type.
         */
        void setPaintOverflow(int layerId, const QString& paintOverflow);
        const QString& PaintLayerDockWidget::getPaintOverflow(int layerId);

        /* Set/get the Carbon Copy texture
         */
        void setCarbonCopyTextureFileName (int layerId, const QString& textureFileName);
        const QString& getCarbonCopyTextureFileName (int layerId);

        /* Set/get the Carbon Copy texture scale
         */
        void setCarbonCopyScale (int layerId, float scale);
        float getCarbonCopyScale (int layerId);

        /* Set/get the paint colour
         * This colour is forwarded to the PaintLayer
         */
        void setPaintColour(int layerId, QColor colour);
        QColor getPaintColour(int layerId);

        /* Determines whether the jitter is set for colour painting
         * This value is forwarded to the PaintLayer
         */
        bool hasJitterPaintEnabled(int layerId);

        /* Determines the min value for jitter
         */
        void setJitterPaintColourMin(int layerId, QColor min);
        QColor getJitterPaintColourMin(int layerId);

        /* Determines the max value for jitter
         */
        void setJitterPaintColourMax(int layerId, QColor max);
        QColor getJitterPaintColourMax(int layerId);

        /* Determines the jitter interval
         */
        void setJitterPaintColourInterval(int layerId, float interval);
        float getJitterPaintColourInterval(int layerId);

        /* Set/get the brush force
         * This value is forwarded to the PaintLayer
         */
        void setBrushForce(int layerId, float force);
        float getBrushForce(int layerId);

        /* Determines whether the jitter is set for force
         */
        bool hasJitterForceEnabled(int layerId);

        /* Set/get the brush force min and max
         * This value is forwarded to the PaintLayer
         */
        void setJitterForceMin(int layerId, float min);
        void setJitterForceMax(int layerId, float max);
        float getJitterForceMin(int layerId);
        float getJitterForceMax(int layerId);

        /* Set/get the brush force interval
         * This value is forwarded to the PaintLayer
         */
        void setJitterForceInterval(int layerId, float interval);
        float getJitterForceInterval(int layerId);

        /* Set/get the brush scale
         * This value is forwarded to the PaintLayer
         */
        void setBrushScale(int layerId, float scale);
        float getBrushScale(int layerId);

        /* Determines whether the jitter is set for scale
         */
        bool hasJitterScaleEnabled(int layerId);

        /* Set/get the brush scale min and max
         * This value is forwarded to the PaintLayer
         */
        void setJitterScaleMin(int layerId, float min);
        void setJitterScaleMax(int layerId, float max);
        float getJitterScaleMin(int layerId);
        float getJitterScaleMax(int layerId);

        /* Set/get the brush scale interval
         * This value is forwarded to the PaintLayer
         */
        void setJitterScaleInterval(int layerId, float interval);
        float getJitterScaleInterval(int layerId);

        /* Rotation angle
         * This value is forwarded to the PaintLayer
         */
        void setRotationAngle(int layerId, float angle);
        float getRotationAngle(int layerId);
        bool hasJitterRotationAngleEnabled(int layerId);
        void setJitterRotationAngleMin(int layerId, float min);
        float getJitterRotationAngleMin(int layerId);
        void setJitterRotationAngleMax(int layerId, float max);
        float getJitterRotationAngleMax(int layerId);
        void setJitterRotationAngleInterval(int layerId, float interval);
        float getJitterRotationAngleInterval(int layerId);

        /* Translation
         * This value is forwarded to the PaintLayer
         */
        void setTranslation(int layerId, const QVector2D& translation);
        const QVector2D& getTranslation(int layerId);
        bool hasJitterTranslationEnabled(int layerId);
        void setJitterTranslationX(int layerId, const QVector2D& x);
        void setJitterTranslationY(int layerId, const QVector2D& y);
        const QVector2D& getJitterTranslationX(int layerId);
        const QVector2D& getJitterTranslationY(int layerId);
        void setJitterTranslationInterval(int layerId, float interval);
        float getJitterTranslationInterval(int layerId);

        /* Mirror horizontal
         * This value is forwarded to the PaintLayer
         */
        void setMirrorHorizontal(int layerId, bool mirrored);
        bool getMirrorHorizontal(int layerId);
        void setJitterMirrorHorizontal(int layerId, bool enabled);
        bool hasJitterMirrorHorizontal(int layerId);
        void setJitterMirrorHorizontalInterval(int layerId, float interval);
        float getJitterMirrorHorizontalInterval(int layerId);

        /* Mirror vertical
         * This value is forwarded to the PaintLayer
         */
        void setMirrorVertical(int layerId, bool mirrored);
        bool getMirrorVertical(int layerId);
        void setJitterMirrorVertical(int layerId, bool enabled);
        bool hasJitterMirrorVertical(int layerId);
        void setJitterMirrorVerticalInterval(int layerId, float interval);
        float getJitterMirrorVerticalInterval(int layerId);

    private slots:
        void handleNewLayer (int layerId, const QString& layerName);
        void handleDeleteLayer (int layerId, const QString& layerName);
        void handleLayerSelected (int layerId, const QString& layerName);
        void handleLayerVisibilityChanged(int layerId, const QString& name, bool visible);

    private:
        MainWindow* mParent;
        PaintLayerWidget* mPaintLayerWidget;
        PaintLayerManager* mPaintLayerManager; // Use the PaintLayerManager to manager paint layers
        QStringList mAvailableTextureTypes;
        QString mHelperString;
        QColor mHelplerColour;
        QVector2D mHelperVector2D;
};

#endif
