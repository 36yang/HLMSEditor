/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

#ifndef PAINTLAYER_DOCKWIDGET_H
#define PAINTLAYER_DOCKWIDGET_H

#include <QtWidgets>
#include <QDockWidget>
#include <QColor>
#include "paintlayer_widget.h"

QT_BEGIN_NAMESPACE
class QDockWidget;
QT_END_NAMESPACE

class MainWindow;
class PaintLayerManager;

/****************************************************************************
 The PaintLayerDockWidget is a container to manage the PaintLayerManager and
 the PaintLayerWidget. The PaintLayerWidget is the actual widget that contains
 the table with layers/
 ***************************************************************************/
class PaintLayerDockWidget : public QDockWidget
{
    Q_OBJECT

    public:
        PaintLayerDockWidget(PaintLayerManager* paintLayerManager,
                             QString title,
                             MainWindow* parent,
                             Qt::WindowFlags flags = 0);
        ~PaintLayerDockWidget(void);

        /* Determines whether there is a current datablock.
         * It must be a Pbs, because Unlit painting is not very interesting (and therefor not supported)
         */
        bool currentDatablockExists(void);
        bool currentDatablockIsPbs(void);

        /* The function is called everytime a new Hlms material is created
         * The Paint Layers don't have any meaning for the new Hlms, so they can be deleted
         */
        void newHlmsCreated (void);

        /* Returns a list with available texture types. These are the texture types used by
         * the current hlms datablock.
         */
        QStringList getAvailableTextureTypes(void);

        /* Set/get a texture type in a PaintLayer.
         * Based on the texture type (and the datablock name), the texture is also searched and set in the PaintLayer.
         */
        void setTextureType (int layerId, QString textureType);
        QString getTextureType (int layerId);

        /* Set/get the paint colour
         * This colour is forwarded to the PaintLayer
         */
        void setPaintColour(int layerId, QColor colour);
        QColor getPaintColour(int layerId);

        /* Determines whether the jitter is set for colour painting
         * This value is forwarded to the PaintLayer
         */
        bool getJitterPaint(int layerId);

        /* Determines the min value for jitter
         */
        void setJitterPaintColourMin(int layerId, QColor colour);
        QColor getJitterPaintColourMin(int layerId);

        /* Determines the max value for jitter
         */
        void setJitterPaintColourMax(int layerId, QColor colour);
        QColor getJitterPaintColourMax(int layerId);

        /* Determines the jitter interval
         */
        void setJitterPaintColourInterval(int layerId, float interval);
        float getJitterPaintColourInterval(int layerId);

        /* Set/get the brush force
         * This value is forwarded to the PaintLayer
         */
        void setBrushForce(int layerId, float force);
        float getBrushForce(int layerId);

        /* Set/get the brush scale
         * This value is forwarded to the PaintLayer
         */
        void setBrushScale(int layerId, float force);
        float getBrushScale(int layerId);

    private slots:
        void handleNewLayer (int layerId, QString layerName);
        void handleDeleteLayer (int layerId, QString layerName);
        void handleLayerSelected (int layerId, QString layerName);

    private:
        MainWindow* mParent;
        PaintLayerWidget* mPaintLayerWidget;
        PaintLayerManager* mPaintLayerManager; // Use the PaintLayerManager to manager paint layers
        QStringList mAvailableTextureTypes;
        QString mHelperString;
        QColor mHelplerColour;
};

#endif
