/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QApplication>
#include <QDesktopWidget>
#include <QRect>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QMessageBox>
#include <QMimeData>
#include <QDir>
#include <QFileInfo>
#include "magus_core.h"
#include "brush_widget.h"
#include "brush_dockwidget.h"
#include "tool_default_texturewidget.h"

//****************************************************************************/
BrushWidget::BrushWidget (const QString& brushDir, BrushDockWidget* brushDockWidget, QWidget* parent) :
    QWidget(parent),
    mBrushDockWidget(brushDockWidget)
{
    setWindowTitle(QString("Brushes"));
    QHBoxLayout* mainLayout = new QHBoxLayout;
    QVBoxLayout* tableLayout = new QVBoxLayout;
    mBrushDir = brushDir;

    mTextureWidget = new Magus::QtDefaultTextureWidget(this);
    mTextureWidget->setTextureSize(QSize(64, 64));
    mTextureWidget->setContentsMargins(-8, -8, -8, -8);
    loadBrushesRecursively (mBrushDir);
    //connect(mTextureWidget, SIGNAL(selected(QString,QString)), this, SLOT(handleAssetSelected(QString,QString)));
    connect(mTextureWidget, SIGNAL(doubleClicked(QString,QString)), this, SLOT(handleBrushDoubleClicked(QString,QString)));

    // Layout
    mainLayout->addWidget(mTextureWidget);
    mainLayout->addLayout(tableLayout);
    setLayout(mainLayout);
}

//****************************************************************************/
BrushWidget::~BrushWidget (void)
{
}

//****************************************************************************/
void BrushWidget::loadBrushesRecursively(const QString& searchPath)
{
    // Get all texture files from all dirs/subdirs
    QDir dir(searchPath);
    dir.makeAbsolute();

    if (dir.exists())
    {
        Q_FOREACH(QFileInfo info, dir.entryInfoList(QDir::NoDotAndDotDot | QDir::System | QDir::Hidden  | QDir::AllDirs | QDir::Files, QDir::DirsFirst))
        {
            if (info.isDir())
            {
                loadBrushesRecursively(info.absoluteFilePath());
            }
            else
            {
                QString fileName = info.absoluteFilePath();
                if (Magus::isTypeBasedOnExtension(fileName, Magus::MAGUS_SUPPORTED_IMAGE_FORMATS, Magus::MAGUS_SUPPORTED_IMAGE_FORMATS_LENGTH))
                {
                    // It is an image
                    QPixmap texturePixmap = QPixmap(info.absoluteFilePath());
                    mTextureWidget->addTexture(texturePixmap, info.absoluteFilePath(), info.fileName());
                }
            }
        }
    }
}

//****************************************************************************/
void BrushWidget::handleBrushDoubleClicked(const QString& name, const QString& baseName)
{
    emit brushDoubleClicked(name, baseName);
}
