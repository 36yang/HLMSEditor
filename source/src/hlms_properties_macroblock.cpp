/****************************************************************************
**
** Copyright (C) 2016 - 2017
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "constants.h"
#include "asset_containerwidget.h"
#include "asset_propertywidget_select.h"
#include "asset_propertywidget_slider_decimal.h"
#include "asset_propertywidget_checkbox.h"
#include "hlms_properties_macroblock.h"
#include "properties_dockwidget.h"
#include "hlms_node_macroblock.h"
#include "properties_dockwidget.h"

//****************************************************************************/
HlmsPropertiesMacroblock::HlmsPropertiesMacroblock(const QString& fileNameIcon,
                                                   PropertiesDockWidget* propertiesDockWidget,
                                                   QWidget* parent) :
    mPropertiesDockWidget(propertiesDockWidget),
    QWidget(parent)
{
    mHlmsNodeMacroblock = 0;
    QVBoxLayout* mainLayout = new QVBoxLayout;
    mainLayout->setContentsMargins(0, 0, 0, 0);
    mAssetWidget = new Magus::QtAssetWidget(QString("Macroblock"), fileNameIcon, this);
    mAssetWidget->setFileNameIconCollapsed(ASSET_ICON_COLLAPSE);
    mAssetWidget->setFileNameIconExpanded(ASSET_ICON_EXPAND);
    mAssetWidget->setHeaderAction2Icon(ICON_INFO);
    mAssetWidget->setHeaderTitleBold();
    connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));
    connect(mAssetWidget, SIGNAL(headerAction2Clicked()), this, SLOT(infoClicked(void)));

    // Create container - General
    Magus::QtContainerWidget* container = 0;
    container = mAssetWidget->createContainer(CONTAINER_MACROBLOCK_GENERAL, QString("General"));
    container->setTitleBold(true);

    // Create properties
    // ******** Enabled ********
    mAssetWidget->createProperty(CONTAINER_MACROBLOCK_GENERAL,
                                 PROPERTY_MACROBLOCK_ENABLED,
                                 QString("Enabled"),
                                 Magus::QtProperty::CHECKBOX);

    // ******** Scissor Test Enabled ********
    (mAssetWidget->createProperty(CONTAINER_MACROBLOCK_GENERAL,
                                  PROPERTY_MACROBLOCK_SCISSOR_TEST_ENABLED,
                                  QString("Scissor test enabled"),
                                  Magus::QtProperty::CHECKBOX));

    // ******** Depth check ********
    (mAssetWidget->createProperty(CONTAINER_MACROBLOCK_GENERAL,
                                  PROPERTY_MACROBLOCK_DEPTH_CHECK,
                                  QString("Depth check"),
                                  Magus::QtProperty::CHECKBOX));

    // ******** Depth write ********
    (mAssetWidget->createProperty(CONTAINER_MACROBLOCK_GENERAL,
                                  PROPERTY_MACROBLOCK_DEPTH_WRITE,
                                  QString("Depth write"),
                                  Magus::QtProperty::CHECKBOX));

    // ******** Depth function ********
    // CMPF_ALWAYS_FAIL
    // CMPF_ALWAYS_PASS
    // CMPF_LESS
    // CMPF_LESS_EQUAL
    // CMPF_EQUAL
    // CMPF_NOT_EQUAL
    // CMPF_GREATER_EQUAL
    // CMPF_GREATER
    QStringList stringListCompareFunction;
    stringListCompareFunction << QString("Always fail") <<
                                 QString("Always pass") <<
                                 QString("Less") <<
                                 QString("Less equal") <<
                                 QString("Equal") <<
                                 QString("Not equal") <<
                                 QString("Greater equal") <<
                                 QString("Greater") <<
                                 QString("Disabled");
    Magus::QtSelectProperty* selectCompareFunctionProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_MACROBLOCK_GENERAL,
                                          PROPERTY_MACROBLOCK_DEPTH_FUNCTION,
                                          QString("Compare function"),
                                          Magus::QtProperty::SELECT));
    selectCompareFunctionProperty->addValues(stringListCompareFunction);

    // ******** Depth bias constant ********
    Magus::QtSliderDecimalProperty* sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_MACROBLOCK_GENERAL,
                                      PROPERTY_MACROBLOCK_DEPTH_BIAS_CONSTANT,
                                      QString("Depth bias constant"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);

    // ******** Depth bias slope scale ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_MACROBLOCK_GENERAL,
                                      PROPERTY_MACROBLOCK_DEPTH_BIAS_SLOPE_SCALE,
                                      QString("Depth bias slope scale"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);

    // ******** Cull mode ********
    // CULL_NONE
    // CULL_CLOCKWISE
    // CULL_ANTICLOCKWISE
    QStringList stringListCullMode;
    stringListCullMode << QString("None") <<
                          QString("Cull clockwise") <<
                          QString("Cull anticlockwise");
    Magus::QtSelectProperty* selectCullModeProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_MACROBLOCK_GENERAL,
                                          PROPERTY_MACROBLOCK_CULL_MODE,
                                          QString("Cull mode"),
                                          Magus::QtProperty::SELECT));
    selectCullModeProperty->addValues(stringListCullMode);

    // ******** Polygon mode ********
    // PM_POINTS
    // PM_WIREFRAME
    // PM_SOLID
    QStringList stringListPolygonMode;
    stringListPolygonMode << QString("Points") <<
                             QString("Wireframe") <<
                             QString("Solid");
    Magus::QtSelectProperty* selectPolygonModeProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_MACROBLOCK_GENERAL,
                                          PROPERTY_MACROBLOCK_POLYGON_MODE,
                                          QString("Polygon mode"),
                                          Magus::QtProperty::SELECT));
    selectPolygonModeProperty->addValues(stringListPolygonMode);

    // Layout
    mainLayout->addWidget(mAssetWidget);
    setLayout(mainLayout);
    mAssetWidget->expandAllContainers();

    QSizePolicy sizePolicypRetain = sizePolicy();
    sizePolicypRetain.setRetainSizeWhenHidden(true);
    setSizePolicy(sizePolicypRetain);
}

//****************************************************************************/
HlmsPropertiesMacroblock::~HlmsPropertiesMacroblock(void)
{
}

//****************************************************************************/
void HlmsPropertiesMacroblock::setObject (HlmsNodeMacroblock* hlmsNodeMacroblock)
{
    mHlmsNodeMacroblock = hlmsNodeMacroblock;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtCheckBoxProperty* checkboxProperty;

    // ******** Enabled ********
    checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_MACROBLOCK_ENABLED));
    checkboxProperty->setValue(hlmsNodeMacroblock->getMacroblockEnabled());

    // ******** Scissor Test Enabled ********
    checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_MACROBLOCK_SCISSOR_TEST_ENABLED));
    checkboxProperty->setValue(hlmsNodeMacroblock->getScissorTestEnabled());

    // ******** Depth check ********
    checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_MACROBLOCK_DEPTH_CHECK));
    checkboxProperty->setValue(hlmsNodeMacroblock->getDepthCheck());

    // ******** Depth write ********
    checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_MACROBLOCK_DEPTH_WRITE));
    checkboxProperty->setValue(hlmsNodeMacroblock->getDepthWrite());

    // ******** Depth function ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_MACROBLOCK_DEPTH_FUNCTION));
    selectProperty->setCurentIndex(hlmsNodeMacroblock->getDepthFunc());

    // ******** Depth bias constant ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_MACROBLOCK_DEPTH_BIAS_CONSTANT));
    sliderDecimalProperty->setValue(hlmsNodeMacroblock->getDepthBiasConstant());

    // ******** Depth bias slope scale ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_MACROBLOCK_DEPTH_BIAS_SLOPE_SCALE));
    sliderDecimalProperty->setValue(hlmsNodeMacroblock->getDepthBiasSlopeScale());

    // ******** Cull mode ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_MACROBLOCK_CULL_MODE));
    selectProperty->setCurentIndex(hlmsNodeMacroblock->getCullMode());

    // ******** Polygon mode ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_MACROBLOCK_POLYGON_MODE));
    selectProperty->setCurentIndex(hlmsNodeMacroblock->getPolygonMode());
}

//****************************************************************************/
void HlmsPropertiesMacroblock::propertyValueChanged(QtProperty* property)
{
    if (!mHlmsNodeMacroblock || !property)
        return;

    Magus::QtSelectProperty* selectProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtCheckBoxProperty* checkboxProperty;

    switch (property->mPropertyId)
    {
        case PROPERTY_MACROBLOCK_ENABLED:
        {
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodeMacroblock->setMacroblockEnabled(checkboxProperty->getValue());
        }
        break;
        case PROPERTY_MACROBLOCK_SCISSOR_TEST_ENABLED:
        {
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodeMacroblock->setScissorTestEnabled(checkboxProperty->getValue());
        }
        break;
        case PROPERTY_MACROBLOCK_DEPTH_CHECK:
        {
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodeMacroblock->setDepthCheck(checkboxProperty->getValue());
        }
        break;
        case PROPERTY_MACROBLOCK_DEPTH_WRITE:
        {
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodeMacroblock->setDepthWrite(checkboxProperty->getValue());
        }
        break;
        case PROPERTY_MACROBLOCK_DEPTH_FUNCTION:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeMacroblock->setDepthFunc(selectProperty->getCurrentIndex());
        }
        break;
        case PROPERTY_MACROBLOCK_DEPTH_BIAS_CONSTANT:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeMacroblock->setDepthBiasConstant(sliderDecimalProperty->getValue());
        }
        break;
        case PROPERTY_MACROBLOCK_DEPTH_BIAS_SLOPE_SCALE:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeMacroblock->setDepthBiasSlopeScale(sliderDecimalProperty->getValue());
        }
        break;
        case PROPERTY_MACROBLOCK_CULL_MODE:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeMacroblock->setCullMode(selectProperty->getCurrentIndex());
        }
        break;
        case PROPERTY_MACROBLOCK_POLYGON_MODE:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeMacroblock->setPolygonMode(selectProperty->getCurrentIndex());
        }
        break;
    }

    // Inform the propertiesDockWidget that a property is changed, so the material is rebuild
    mPropertiesDockWidget->notifyMaterialChanged(property);
}

//****************************************************************************/
void HlmsPropertiesMacroblock::infoClicked(void)
{
    PropertiesDockWidget* parent = static_cast<PropertiesDockWidget*>(parentWidget());
    parent->displayInfo(INFO_MACROBLOCK, QString("Info"));
}
