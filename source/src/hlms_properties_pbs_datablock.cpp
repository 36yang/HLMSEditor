/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "constants.h"
#include "asset_containerwidget.h"
#include "asset_propertywidget.h"
#include "asset_propertywidget_color.h"
#include "asset_propertywidget_decimal.h"
#include "asset_propertywidget_select.h"
#include "asset_propertywidget_checkbox.h"
#include "asset_propertywidget_xyz.h"
#include "asset_propertywidget_string.h"
#include "hlms_properties_pbs_datablock.h"
#include "properties_dockwidget.h"
#include "hlms_node_pbs_datablock.h"

//****************************************************************************/
HlmsPropertiesPbsDatablock::HlmsPropertiesPbsDatablock(const QString& fileNameIcon, QWidget* parent) : QWidget(parent)
{
    mHlmsNodePbsDatablock = 0;
    QVBoxLayout* mainLayout = new QVBoxLayout;
    mainLayout->setContentsMargins(0, 0, 0, 0);
    mAssetWidget = new Magus::QtAssetWidget(QString("Hlms Pbs"), fileNameIcon, this);
    mAssetWidget->setFileNameIconCollapsed(ASSET_ICON_COLLAPSE);
    mAssetWidget->setFileNameIconExpanded(ASSET_ICON_EXPAND);
    mAssetWidget->setHeaderAction2Icon(ICON_INFO);
    mAssetWidget->setHeaderTitleBold();
    connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));
    connect(mAssetWidget, SIGNAL(headerAction2Clicked()), this, SLOT(infoClicked(void)));

    // Create container - General
    Magus::QtContainerWidget* container = 0;
    container = mAssetWidget->createContainer(CONTAINER_PBS_DATABLOCK_GENERAL, QString(""));

    // Create properties
    // ******** Name ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_NAME,
                                 QString("Name"),
                                 Magus::QtProperty::STRING);

    // ******** Diffuse ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_DIFFUSE,
                                 QString("Diffuse [0..255]"),
                                 Magus::QtProperty::COLOR);

    // ******** Specular ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_SPECULAR,
                                 QString("Specular [0..255]"),
                                 Magus::QtProperty::COLOR);

    // ******** Roughness ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_ROUGHNESS,
                                 QString("Roughness [0..inf]"),
                                 Magus::QtProperty::DECIMAL);

    // ******** Workflow ********
    QStringList stringListWorkflow;
    stringListWorkflow << QString("Specular Workflow") <<
                          QString("Specular as fresnel Workflow") <<
                          QString("Metallic Workflow");
    Magus::QtSelectProperty* selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_WORKFLOW,
                                          QString("Workflow"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListWorkflow);

    // ******** Metalness ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_METALNESS,
                                 QString("Metalness [0..1]"),
                                 Magus::QtProperty::DECIMAL);

    // ******** Separate fresnel ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_SEPARATE_FRESNEL,
                                 QString("Separate Fresnel"),
                                 Magus::QtProperty::CHECKBOX);

    // ******** Fresnel ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_FRESNEL,
                                 QString("Fresnel [0..1]"),
                                 Magus::QtProperty::XYZ);

    // ******** Amount of transparency ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_TRANPARENCEY_VALUE,
                                 QString("Transparency value [0..1]"),
                                 Magus::QtProperty::DECIMAL);

    // ******** Transparency mode ********
    QStringList stringListTransparencyMode;
    stringListTransparencyMode << QString("None") <<
                                  QString("Transparent") <<
                                  QString("Fade");
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_TRANPARENCY_MODE,
                                          QString("Transparency Mode"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTransparencyMode);

    // ******** Use alpha from textures ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_USE_ALPHA_FROM_TEXTURES,
                                 QString("Use alpha from textures"),
                                 Magus::QtProperty::CHECKBOX);

    // ******** Brdf ********
    QStringList stringListBrdf;
    stringListBrdf << QString("Default") <<
                      QString("Cook Torrance") <<
                      QString("Default uncorrelated") <<
                      QString("Def. separate diffuse fresnel") <<
                      QString("CT separate diffuse fresnel");
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_BRDF,
                                          QString("Brdf"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListBrdf);

    // ******** Alpha test ********
    // CMPF_ALWAYS_FAIL
    // CMPF_ALWAYS_PASS
    // CMPF_LESS
    // CMPF_LESS_EQUAL
    // CMPF_EQUAL
    // CMPF_NOT_EQUAL
    // CMPF_GREATER_EQUAL
    // CMPF_GREATER
    QStringList stringListCompareFunction;
    stringListCompareFunction << QString("Always fail") <<
                                 QString("Always pass") <<
                                 QString("Less") <<
                                 QString("Less equal") <<
                                 QString("Equal") <<
                                 QString("Not equal") <<
                                 QString("Greater equal") <<
                                 QString("Greater") <<
                                 QString("Disabled");
    Magus::QtSelectProperty* selectAlphaTestProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_ALPHATEST,
                                          QString("Alpha test"),
                                          Magus::QtProperty::SELECT));
    selectAlphaTestProperty->addValues(stringListCompareFunction);

    // ******** Alpha test threshold ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_ALPHATEST_THRESHOLD,
                                 QString("Alpha test threshold"),
                                 Magus::QtProperty::DECIMAL);

    // Layout
    mainLayout->addWidget(mAssetWidget);
    setLayout(mainLayout);
    mAssetWidget->expandAllContainers();
}

//****************************************************************************/
HlmsPropertiesPbsDatablock::~HlmsPropertiesPbsDatablock(void)
{
}

//****************************************************************************/
void HlmsPropertiesPbsDatablock::setObject (HlmsNodePbsDatablock* hlmsNodePbsDatablock)
{
    if (!hlmsNodePbsDatablock)
        return;

    mHlmsNodePbsDatablock = hlmsNodePbsDatablock;
    Magus::QtCheckBoxProperty* checkBoxProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtDecimalProperty* decimalProperty;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtXYZProperty* xyzProperty;
    Magus::QtStringProperty* stringProperty;

    // ******** Name ********
    stringProperty = static_cast<Magus::QtStringProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_NAME));
    stringProperty->setString(mHlmsNodePbsDatablock->getName());

    // ******** Diffuse ********
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_DIFFUSE));
    colorProperty->setColor(mHlmsNodePbsDatablock->getDiffuseRed(),
                            mHlmsNodePbsDatablock->getDiffuseGreen(),
                            mHlmsNodePbsDatablock->getDiffuseBlue(),
                            1.0f);

    // ******** Specular ********
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_SPECULAR));
    colorProperty->setColor(mHlmsNodePbsDatablock->getSpecularRed(),
                            mHlmsNodePbsDatablock->getSpecularGreen(),
                            mHlmsNodePbsDatablock->getSpecularBlue(),
                            1.0f);

    // ******** Roughness ********
    decimalProperty = static_cast<Magus::QtDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_ROUGHNESS));
    decimalProperty->setValue(mHlmsNodePbsDatablock->getRoughness());

    // ******** Workflow ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_WORKFLOW));
    selectProperty->setCurentIndex(mHlmsNodePbsDatablock->getWorkflow());

    // ******** Metalness ********
    decimalProperty = static_cast<Magus::QtDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_METALNESS));
    decimalProperty->setValue(mHlmsNodePbsDatablock->getMetalness());

    // ******** Separate fresnel ********
    checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_SEPARATE_FRESNEL));
    checkBoxProperty->setValue(mHlmsNodePbsDatablock->isSeparateFresnel());

    // ******** Fresnel ********
    xyzProperty = static_cast<Magus::QtXYZProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_FRESNEL));
    xyzProperty->setXYZ(mHlmsNodePbsDatablock->getFresnelRed(),
                        mHlmsNodePbsDatablock->getFresnelGreen(),
                        mHlmsNodePbsDatablock->getFresnelBlue());

    // ******** Amount of transparency ********
    decimalProperty = static_cast<Magus::QtDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_TRANPARENCEY_VALUE));
    decimalProperty->setValue(mHlmsNodePbsDatablock->getTransparencyValue());

    // ******** Transparency mode ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_TRANPARENCY_MODE));
    selectProperty->setCurentIndex(mHlmsNodePbsDatablock->getTransparencyMode());

    // ******** Use alpha from textures ********
    checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_USE_ALPHA_FROM_TEXTURES));
    checkBoxProperty->setValue(mHlmsNodePbsDatablock->isUseAlphaFromTexture());

    // ******** Brdf ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_BRDF));
    selectProperty->setCurentIndex(mHlmsNodePbsDatablock->getBrdf());

    // ******** Alpha test ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_ALPHATEST));
    selectProperty->setCurentIndex(mHlmsNodePbsDatablock->getAlphaTest());

    // ******** Alpha test threshold ********
    decimalProperty = static_cast<Magus::QtDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_ALPHATEST_THRESHOLD));
    decimalProperty->setValue(mHlmsNodePbsDatablock->getAlphaTestThreshold());
}

//****************************************************************************/
void HlmsPropertiesPbsDatablock::propertyValueChanged(QtProperty* property)
{
    if (!mHlmsNodePbsDatablock || !property)
        return;

    Magus::QtCheckBoxProperty* checkBoxProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtDecimalProperty* decimalProperty;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtXYZProperty* xyzProperty;
    Magus::QtStringProperty* stringProperty;

    switch (property->mPropertyId)
    {
        case PROPERTY_PBS_DATABLOCK_NAME:
        {
            stringProperty = static_cast<Magus::QtStringProperty*>(property);
            mHlmsNodePbsDatablock->setName(stringProperty->getString());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_DIFFUSE:
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(property);
            mHlmsNodePbsDatablock->setDiffuseRed(colorProperty->getRed());
            mHlmsNodePbsDatablock->setDiffuseGreen(colorProperty->getGreen());
            mHlmsNodePbsDatablock->setDiffuseBlue(colorProperty->getBlue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_SPECULAR:
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(property);
            mHlmsNodePbsDatablock->setSpecularRed(colorProperty->getRed());
            mHlmsNodePbsDatablock->setSpecularGreen(colorProperty->getGreen());
            mHlmsNodePbsDatablock->setSpecularBlue(colorProperty->getBlue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_ROUGHNESS:
        {
            decimalProperty = static_cast<Magus::QtDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setRoughness(decimalProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_WORKFLOW:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodePbsDatablock->setWorkflow(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_METALNESS:
        {
            decimalProperty = static_cast<Magus::QtDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setMetalness(decimalProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_SEPARATE_FRESNEL:
        {
            checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodePbsDatablock->setSeparateFresnel(checkBoxProperty->getValue());
            xyzProperty = static_cast<Magus::QtXYZProperty*>(mAssetWidget->getPropertyWidget(CONTAINER_PBS_DATABLOCK_GENERAL, PROPERTY_PBS_DATABLOCK_FRESNEL));
            xyzProperty->enableY(checkBoxProperty->getValue());
            xyzProperty->enableZ(checkBoxProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_FRESNEL:
        {
            xyzProperty = static_cast<Magus::QtXYZProperty*>(property);
            mHlmsNodePbsDatablock->setFresnelRed(xyzProperty->getX());
            mHlmsNodePbsDatablock->setFresnelGreen(xyzProperty->getY());
            mHlmsNodePbsDatablock->setFresnelBlue(xyzProperty->getZ());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_TRANPARENCEY_VALUE:
        {
            decimalProperty = static_cast<Magus::QtDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setTransparencyValue(decimalProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_TRANPARENCY_MODE:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodePbsDatablock->setTransparencyMode(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_USE_ALPHA_FROM_TEXTURES:
        {
            checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodePbsDatablock->setUseAlphaFromTexture(checkBoxProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_BRDF:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodePbsDatablock->setBrdf(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_ALPHATEST:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodePbsDatablock->setAlphaTest(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_ALPHATEST_THRESHOLD:
        {
            decimalProperty = static_cast<Magus::QtDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setAlphaTestThreshold(decimalProperty->getValue());
        }
        break;
    }
}

//****************************************************************************/
void HlmsPropertiesPbsDatablock::infoClicked(void)
{
    PropertiesDockWidget* parent = static_cast<PropertiesDockWidget*>(parentWidget());
    parent->displayInfo(INFO_PBS, QString("Info"));
}
