/****************************************************************************
**
** Copyright (C) 2016 - 2017
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "constants.h"
#include "asset_containerwidget.h"
#include "asset_propertywidget.h"
#include "asset_propertywidget_color.h"
#include "asset_propertywidget_slider_decimal.h"
#include "asset_propertywidget_select.h"
#include "asset_propertywidget_checkbox.h"
#include "asset_propertywidget_string.h"
#include "hlms_properties_pbs_datablock.h"
#include "properties_dockwidget.h"
#include "hlms_node_pbs_datablock.h"
#include "properties_dockwidget.h"
#include "rapidjson/document.h"

//****************************************************************************/
HlmsPropertiesPbsDatablock::HlmsPropertiesPbsDatablock(const QString& fileNameIcon,
                                                       PropertiesDockWidget* propertiesDockWidget,
                                                       QWidget* parent) :
    mPropertiesDockWidget(propertiesDockWidget),
    QWidget(parent)
{
    mHlmsNodePbsDatablock = 0;
    QVBoxLayout* mainLayout = new QVBoxLayout;
    mainLayout->setContentsMargins(0, 0, 0, 0);
    mAssetWidget = new Magus::QtAssetWidget(QString("Hlms Pbs"), fileNameIcon, this);
    mAssetWidget->setFileNameIconCollapsed(ASSET_ICON_COLLAPSE);
    mAssetWidget->setFileNameIconExpanded(ASSET_ICON_EXPAND);
    mAssetWidget->setHeaderAction2Icon(ICON_INFO);
    mAssetWidget->setHeaderTitleBold();
    connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));
    connect(mAssetWidget, SIGNAL(headerAction2Clicked()), this, SLOT(infoClicked(void)));

    // Create container - General
    Magus::QtContainerWidget* container = 0;
    container = mAssetWidget->createContainer(CONTAINER_PBS_DATABLOCK_GENERAL, QString("General"));
    container->setTitleBold(true);
    container = mAssetWidget->createContainer(CONTAINER_PBS_DATABLOCK_COLOUR, QString("Colour"));
    container->setTitleBold(true);

    // Create properties
    // ******** Name ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_NAME,
                                 QString("Name"),
                                 Magus::QtProperty::STRING);

    // ******** Workflow ********
    QStringList stringListWorkflow;
    stringListWorkflow << QString("Specular Workflow") <<
                          QString("Specular as fresnel Workflow") <<
                          QString("Metallic Workflow");
    Magus::QtSelectProperty* selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_WORKFLOW,
                                          QString("Workflow"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListWorkflow);

    // ******** Roughness ********
    Magus::QtSliderDecimalProperty* sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                      PROPERTY_PBS_DATABLOCK_ROUGHNESS,
                                      QString("Roughness [0..inf]"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 3.0f, 0.01f);

    // ******** Metalness ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_METALNESS,
                                          QString("Metalness [0..1]"),
                                          Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);

    // ******** Separate fresnel ********
    Magus::QtCheckBoxProperty* checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_SEPARATE_FRESNEL,
                                          QString("Separate Fresnel"),
                                          Magus::QtProperty::CHECKBOX));
    checkBoxProperty->setValue(false);

    // ******** Fresnel ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_FRESNEL_R,
                                          QString("Fresnel [0..1]"),
                                          Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_FRESNEL_G,
                                          QString("Fresnel green [0..1]"),
                                          Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);
    sliderDecimalProperty->setVisible(false); // No separate fresnel by default
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_FRESNEL_B,
                                          QString("Fresnel blue  [0..1]"),
                                          Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);
    sliderDecimalProperty->setVisible(false); // No separate fresnel by default

    // ******** Amount of transparency ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_TRANPARENCEY_VALUE,
                                          QString("Transparency value [0..1]"),
                                          Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);


    // ******** Transparency mode ********
    QStringList stringListTransparencyMode;
    stringListTransparencyMode << QString("None") <<
                                  QString("Transparent") <<
                                  QString("Fade");
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_TRANPARENCY_MODE,
                                          QString("Transparency Mode"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTransparencyMode);

    // ******** Two-sided lighting ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_TWO_SIDED_LIGHTING,
                                 QString("Two sided lighting"),
                                 Magus::QtProperty::CHECKBOX);

    // ******** Use alpha from textures ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                 PROPERTY_PBS_DATABLOCK_USE_ALPHA_FROM_TEXTURES,
                                 QString("Use alpha from textures"),
                                 Magus::QtProperty::CHECKBOX);

    // ******** Brdf ********
    QStringList stringListBrdf;
    stringListBrdf << QString("Default") <<
                      QString("Cook Torrance") <<
                      QString("Blinn Phong") <<
                      QString("Default uncorrelated") <<
                      QString("Def. separate diffuse fresnel") <<
                      QString("CT separate diffuse fresnel") <<
                      QString("BP separate diffuse fresnel") <<
                      QString("Blinn Phong legacy math") <<
                      QString("Blinn Phong full legacy");
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_BRDF,
                                          QString("Brdf"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListBrdf, 9);

    // ******** Alpha test ********
    // CMPF_ALWAYS_FAIL
    // CMPF_ALWAYS_PASS
    // CMPF_LESS
    // CMPF_LESS_EQUAL
    // CMPF_EQUAL
    // CMPF_NOT_EQUAL
    // CMPF_GREATER_EQUAL
    // CMPF_GREATER
    QStringList stringListCompareFunction;
    stringListCompareFunction << QString("Always fail") <<
                                 QString("Always pass") <<
                                 QString("Less") <<
                                 QString("Less equal") <<
                                 QString("Equal") <<
                                 QString("Not equal") <<
                                 QString("Greater equal") <<
                                 QString("Greater") <<
                                 QString("Disabled");
    Magus::QtSelectProperty* selectAlphaTestProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_ALPHATEST,
                                          QString("Alpha test"),
                                          Magus::QtProperty::SELECT));
    selectAlphaTestProperty->addValues(stringListCompareFunction, 9);

    // ******** Alpha test threshold ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
            (mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_GENERAL,
                                          PROPERTY_PBS_DATABLOCK_ALPHATEST_THRESHOLD,
                                          QString("Alpha test threshold"),
                                          Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);


    // ******** Diffuse ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_COLOUR,
                                 PROPERTY_PBS_DATABLOCK_DIFFUSE,
                                 QString("Diffuse [0..255]"),
                                 Magus::QtProperty::COLOR);

    // ******** Background diffuse ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_COLOUR,
                                 PROPERTY_PBS_DATABLOCK_BACKGROUND,
                                 QString("Background [0..255]"),
                                 Magus::QtProperty::COLOR);

    // ******** Specular ********
    mAssetWidget->createProperty(CONTAINER_PBS_DATABLOCK_COLOUR,
                                 PROPERTY_PBS_DATABLOCK_SPECULAR,
                                 QString("Specular [0..255]"),
                                 Magus::QtProperty::COLOR);

    // Layout
    mainLayout->addWidget(mAssetWidget);
    setLayout(mainLayout);
    mAssetWidget->expandAllContainers();
}

//****************************************************************************/
HlmsPropertiesPbsDatablock::~HlmsPropertiesPbsDatablock(void)
{
}

//****************************************************************************/
void HlmsPropertiesPbsDatablock::setObject (HlmsNodePbsDatablock* hlmsNodePbsDatablock)
{
    if (!hlmsNodePbsDatablock)
        return;

    mHlmsNodePbsDatablock = hlmsNodePbsDatablock;
    Magus::QtCheckBoxProperty* checkBoxProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtStringProperty* stringProperty;

    // ******** Name ********
    stringProperty = static_cast<Magus::QtStringProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_NAME));
    stringProperty->setString(mHlmsNodePbsDatablock->getName());

    // ******** Diffuse ********
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_DIFFUSE));
    colorProperty->setColor(mHlmsNodePbsDatablock->getDiffuseRed(),
                            mHlmsNodePbsDatablock->getDiffuseGreen(),
                            mHlmsNodePbsDatablock->getDiffuseBlue(),
                            255.0f);

    // ******** Background diffuse ********
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_BACKGROUND));
    colorProperty->setColor(mHlmsNodePbsDatablock->getBackgroundDiffuseRed(),
                            mHlmsNodePbsDatablock->getBackgroundDiffuseGreen(),
                            mHlmsNodePbsDatablock->getBackgroundDiffuseBlue(),
                            255.0f);

    // ******** Specular ********
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_SPECULAR));
    colorProperty->setColor(mHlmsNodePbsDatablock->getSpecularRed(),
                            mHlmsNodePbsDatablock->getSpecularGreen(),
                            mHlmsNodePbsDatablock->getSpecularBlue(),
                            255.0f);

    // ******** Roughness ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_ROUGHNESS));
    sliderDecimalProperty->setValue(mHlmsNodePbsDatablock->getRoughness());

    // ******** Workflow ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_WORKFLOW));
    selectProperty->setCurentIndex(mHlmsNodePbsDatablock->getWorkflow());

    // ******** Metalness ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_METALNESS));
    sliderDecimalProperty->setValue(mHlmsNodePbsDatablock->getMetalness());

    // ******** Separate fresnel ********
    checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_SEPARATE_FRESNEL));
    checkBoxProperty->setValue(mHlmsNodePbsDatablock->isSeparateFresnel());

    // ******** Fresnel ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_FRESNEL_R));
    sliderDecimalProperty->setValue(mHlmsNodePbsDatablock->getFresnelRed());
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_FRESNEL_G));
    sliderDecimalProperty->setValue(mHlmsNodePbsDatablock->getFresnelGreen());
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_FRESNEL_B));
    sliderDecimalProperty->setValue(mHlmsNodePbsDatablock->getFresnelBlue());

    // ******** Amount of transparency ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_TRANPARENCEY_VALUE));
    sliderDecimalProperty->setValue(mHlmsNodePbsDatablock->getTransparencyValue());

    // ******** Transparency mode ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_TRANPARENCY_MODE));
    selectProperty->setCurentIndex(mHlmsNodePbsDatablock->getTransparencyMode());

    // ******** Two-sided lighting ********
    checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_TWO_SIDED_LIGHTING));
    checkBoxProperty->setValue(mHlmsNodePbsDatablock->isTwoSidedLighting());

    // ******** Use alpha from textures ********
    checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_USE_ALPHA_FROM_TEXTURES));
    checkBoxProperty->setValue(mHlmsNodePbsDatablock->isUseAlphaFromTexture());

    // ******** Brdf ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_BRDF));
    selectProperty->setCurentIndex(mHlmsNodePbsDatablock->getBrdf());

    // ******** Alpha test ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_ALPHATEST));
    selectProperty->setCurentIndex(mHlmsNodePbsDatablock->getAlphaTest());

    // ******** Alpha test threshold ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_ALPHATEST_THRESHOLD));
    sliderDecimalProperty->setValue(mHlmsNodePbsDatablock->getAlphaTestThreshold());
}

//****************************************************************************/
void HlmsPropertiesPbsDatablock::propertyValueChanged(QtProperty* property)
{
    if (!mHlmsNodePbsDatablock || !property)
        return;

    Magus::QtCheckBoxProperty* checkBoxProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtStringProperty* stringProperty;

    switch (property->mPropertyId)
    {
        case PROPERTY_PBS_DATABLOCK_NAME:
        {
            stringProperty = static_cast<Magus::QtStringProperty*>(property);
            mHlmsNodePbsDatablock->setName(stringProperty->getString());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_DIFFUSE:
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(property);
            mHlmsNodePbsDatablock->setDiffuseRed(colorProperty->getRed());
            mHlmsNodePbsDatablock->setDiffuseGreen(colorProperty->getGreen());
            mHlmsNodePbsDatablock->setDiffuseBlue(colorProperty->getBlue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_BACKGROUND:
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(property);
            mHlmsNodePbsDatablock->setBackgroundDiffuseRed(colorProperty->getRed());
            mHlmsNodePbsDatablock->setBackgroundDiffuseGreen(colorProperty->getGreen());
            mHlmsNodePbsDatablock->setBackgroundDiffuseBlue(colorProperty->getBlue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_SPECULAR:
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(property);
            mHlmsNodePbsDatablock->setSpecularRed(colorProperty->getRed());
            mHlmsNodePbsDatablock->setSpecularGreen(colorProperty->getGreen());
            mHlmsNodePbsDatablock->setSpecularBlue(colorProperty->getBlue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_ROUGHNESS:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setRoughness(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_WORKFLOW:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodePbsDatablock->setWorkflow(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_METALNESS:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setMetalness(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_SEPARATE_FRESNEL:
        {
            checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodePbsDatablock->setSeparateFresnel(checkBoxProperty->getValue());
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(CONTAINER_PBS_DATABLOCK_GENERAL, PROPERTY_PBS_DATABLOCK_FRESNEL_R));
            if (checkBoxProperty->getValue())
                sliderDecimalProperty->setTitle("Fresnel red [0..1]");
            else
                sliderDecimalProperty->setTitle("Fresnel [0..1]");

            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(CONTAINER_PBS_DATABLOCK_GENERAL, PROPERTY_PBS_DATABLOCK_FRESNEL_G));
            sliderDecimalProperty->setVisible(checkBoxProperty->getValue());
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(CONTAINER_PBS_DATABLOCK_GENERAL, PROPERTY_PBS_DATABLOCK_FRESNEL_B));
            sliderDecimalProperty->setVisible(checkBoxProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_FRESNEL_R:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setFresnelRed(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_FRESNEL_G:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setFresnelGreen(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_FRESNEL_B:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setFresnelBlue(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_TRANPARENCEY_VALUE:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setTransparencyValue(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_TRANPARENCY_MODE:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodePbsDatablock->setTransparencyMode(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_TWO_SIDED_LIGHTING:
        {
            checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodePbsDatablock->setTwoSidedLighting(checkBoxProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_USE_ALPHA_FROM_TEXTURES:
        {
            checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodePbsDatablock->setUseAlphaFromTexture(checkBoxProperty->getValue());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_BRDF:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodePbsDatablock->setBrdf(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_ALPHATEST:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodePbsDatablock->setAlphaTest(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_PBS_DATABLOCK_ALPHATEST_THRESHOLD:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodePbsDatablock->setAlphaTestThreshold(sliderDecimalProperty->getValue());
        }
        break;
    }

    // Inform the propertiesDockWidget that a property is changed, so the material is rebuild
    mPropertiesDockWidget->notifyMaterialChanged(property);
}

//****************************************************************************/
void HlmsPropertiesPbsDatablock::infoClicked(void)
{
    PropertiesDockWidget* parent = static_cast<PropertiesDockWidget*>(parentWidget());
    parent->displayInfo(INFO_PBS, QString("Info"));
}

//****************************************************************************/
void HlmsPropertiesPbsDatablock::setBackgroundDiffusePropertyVisible(bool visible)
{
    Magus::QtColorProperty* colorProperty;
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_BACKGROUND));
    colorProperty->setVisible(visible);
}

//****************************************************************************/
bool HlmsPropertiesPbsDatablock::isPbsProperties (const QString& propertiesName, bool fullName)
{
    QString fileName;
    if (fullName)
        fileName = propertiesName;
    else
        fileName = CLIPBOARD_PATH_QSTRING + propertiesName;
    QFile file(fileName);
    file.open(QFile::ReadOnly | QFile::Text);
    QTextStream readFile(&file);
    QString jsonString = readFile.readAll();
    QByteArray ba = jsonString.toLatin1();
    char* jsonChar = ba.data();

    rapidjson::Document d;
    d.Parse( jsonChar );
    if( d.HasParseError() )
        return false;

    rapidjson::Value::ConstMemberIterator itSampler = d.FindMember("pbs");
    return (itSampler != d.MemberEnd() && itSampler->value.IsObject());
}

//****************************************************************************/
void HlmsPropertiesPbsDatablock::loadProperties (const QString& propertiesName, bool fullName)
{
    QString fileName;
    if (fullName)
        fileName = propertiesName;
    else
        fileName = CLIPBOARD_PATH_QSTRING + propertiesName;
    QFile file(fileName);
    file.open(QFile::ReadOnly | QFile::Text);
    QTextStream readFile(&file);
    QString jsonString = readFile.readAll();
    QByteArray ba = jsonString.toLatin1();
    char* jsonChar = ba.data();

    rapidjson::Document d;
    d.Parse( jsonChar );
    if( d.HasParseError() )
    {
        QMessageBox::information(0, QString("Error"), QString("Cannot load pbs properties"));
        Ogre::LogManager::getSingleton().logMessage("HlmsPropertiesPbsDatablock::loadProperties: Cannot parse " + fileName.toStdString());
    }

    Magus::QtCheckBoxProperty* checkboxProperty;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtColorProperty* colorProperty;

    rapidjson::Value::ConstMemberIterator itSampler = d.FindMember("pbs");
    if (itSampler == d.MemberEnd() || !itSampler->value.IsObject() )
    {
        QMessageBox::information(0, QString("Error"), QString("Cannot load pbs properties"));
        Ogre::LogManager::getSingleton().logMessage("HlmsPropertiesPbsDatablock::loadProperties: File " +
                                                    fileName.toStdString() +
                                                    " is not a pbs");
    }

    rapidjson::Value::ConstMemberIterator it = itSampler->value.MemberBegin();
    rapidjson::Value::ConstMemberIterator itEnd = itSampler->value.MemberEnd();
    while( it != itEnd )
    {
        Ogre::String name(it->name.GetString());
        if (name == "workflow" && it->value.IsInt())
        {
            // ******** Workflow ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_WORKFLOW));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "roughness" && it->value.IsNumber())
        {
            // ******** Roughness ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_ROUGHNESS));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "metalness" && it->value.IsNumber())
        {
            // ******** Metalness ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_METALNESS));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "separate_fresnel" && it->value.IsBool())
        {
            // ******** Separate fresnel ********
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_SEPARATE_FRESNEL));
            checkboxProperty->setValue(it->value.GetBool());
        }
        if (name == "fresnel_red" && it->value.IsNumber())
        {
            // ******** Fresnel (red) ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_FRESNEL_R));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "fresnel_green" && it->value.IsNumber())
        {
            // ******** Fresnel (green) ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_FRESNEL_G));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "fresnel_blue" && it->value.IsNumber())
        {
            // ******** Fresnel (blue) ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_FRESNEL_B));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "transparency" && it->value.IsNumber())
        {
            // ******** Amount of transparency ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_TRANPARENCEY_VALUE));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "tranparency_mode" && it->value.IsInt())
        {
            // ******** Transparency mode ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_TRANPARENCY_MODE));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "two_sided" && it->value.IsBool())
        {
            // ******** Two-sided lighting ********
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_TWO_SIDED_LIGHTING));
            checkboxProperty->setValue(it->value.GetBool());
        }
        if (name == "use_alpha_from_textures" && it->value.IsBool())
        {
            // ******** Use alpha from textures ********
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_USE_ALPHA_FROM_TEXTURES));
            checkboxProperty->setValue(it->value.GetBool());
        }
        if (name == "brdf" && it->value.IsInt())
        {
            // ******** Brdf ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_BRDF));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "alpha_test" && it->value.IsInt())
        {
            // ******** Alpha test ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_ALPHATEST));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "alpha_test_threshold" && it->value.IsNumber())
        {
            // ******** Alpha test threshold ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_ALPHATEST_THRESHOLD));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "diffuse" && it->value.IsArray())
        {
            // ******** Diffuse ********
            colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_DIFFUSE));
            const rapidjson::Value& array = it->value;
            float red = static_cast<float>(array[0].GetDouble());
            float green = static_cast<float>(array[1].GetDouble());
            float blue = static_cast<float>(array[2].GetDouble());
            colorProperty->setColor(red, green, blue, 255.0f);
        }
        if (name == "background" && it->value.IsArray())
        {
            // ******** Background diffuse ********
            colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_BACKGROUND));
            const rapidjson::Value& array = it->value;
            float red = static_cast<float>(array[0].GetDouble());
            float green = static_cast<float>(array[1].GetDouble());
            float blue = static_cast<float>(array[2].GetDouble());
            float alpha= static_cast<float>(array[3].GetDouble());
            colorProperty->setColor(red, green, blue, alpha);
        }
        if (name == "specular" && it->value.IsArray())
        {
            // ******** Specular ********
            colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_PBS_DATABLOCK_SPECULAR));
            const rapidjson::Value& array = it->value;
            float red = static_cast<float>(array[0].GetDouble());
            float green = static_cast<float>(array[1].GetDouble());
            float blue = static_cast<float>(array[2].GetDouble());
            colorProperty->setColor(red, green, blue, 255.0f);
        }

        ++it;
    }
}

//****************************************************************************/
const QString& HlmsPropertiesPbsDatablock::saveProperties (const QString& propertiesBaseName)
{
    mHelperString = "";

    if (!mHlmsNodePbsDatablock)
    {
        QMessageBox::information(0, QString("Error"), QString("Cannot save pbs properties"));
        Ogre::LogManager::getSingleton().logMessage("HlmsPropertiesPbsDatablock::saveProperties: mHlmsNodePbsDatablock = 0");
        return mHelperString;
    }

    // Create the json structure
    QString jsonString;
    jsonString += "{\n";
    jsonString += TAB_QSTRING;
    jsonString += "\"pbs\" : \n";
    jsonString += TAB_QSTRING;
    jsonString += "{\n";

    // ******** Workflow ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"workflow\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getWorkflow()).toString();
    jsonString += ",\n";

    // ******** Roughness ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"roughness\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getRoughness()).toString();
    jsonString += ",\n";

    // ******** Metalness ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"metalness\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getMetalness()).toString();
    jsonString += ",\n";

    // ******** Separate fresnel ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"separate_fresnel\" : ";
    if (mHlmsNodePbsDatablock->isSeparateFresnel())
        jsonString += "true";
    else
        jsonString += "false";
    jsonString += ",\n";

    // ******** Fresnel ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"fresnel_red\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getFresnelRed()).toString();
    jsonString += ",\n";

    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"fresnel_green\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getFresnelGreen()).toString();
    jsonString += ",\n";

    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"fresnel_blue\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getFresnelBlue()).toString();
    jsonString += ",\n";

    // ******** Amount of transparency ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"transparency\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getTransparencyValue()).toString();
    jsonString += ",\n";

    // ******** Transparency mode ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"tranparency_mode\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getTransparencyMode()).toString();
    jsonString += ",\n";

    // ******** Two-sided lighting ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"two_sided\" : ";
    if (mHlmsNodePbsDatablock->isTwoSidedLighting())
        jsonString += "true";
    else
        jsonString += "false";
    jsonString += ",\n";

    // ******** Use alpha from textures ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"use_alpha_from_textures\" : ";
    if (mHlmsNodePbsDatablock->isUseAlphaFromTexture())
        jsonString += "true";
    else
        jsonString += "false";
    jsonString += ",\n";

    // ******** Brdf ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"brdf\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getBrdf()).toString();
    jsonString += ",\n";

    // ******** Alpha test ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"alpha_test\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getAlphaTest()).toString();
    jsonString += ",\n";

    // ******** Alpha test threshold ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"alpha_test_threshold\" : ";
    jsonString += QVariant(mHlmsNodePbsDatablock->getAlphaTestThreshold()).toString();
    jsonString += ",\n";

    // ******** Diffuse ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"diffuse\" : [";
    jsonString += QVariant(mHlmsNodePbsDatablock->getDiffuseRed()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodePbsDatablock->getDiffuseGreen()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodePbsDatablock->getDiffuseBlue()).toString();
    jsonString += "],\n";

    // ******** Background diffuse ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"background\" : [";
    jsonString += QVariant(mHlmsNodePbsDatablock->getBackgroundDiffuseRed()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodePbsDatablock->getBackgroundDiffuseGreen()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodePbsDatablock->getBackgroundDiffuseBlue()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodePbsDatablock->getBackgroundDiffuseAlpha()).toString();
    jsonString += "],\n";

    // ******** Specular ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"specular\" : [";
    jsonString += QVariant(mHlmsNodePbsDatablock->getSpecularRed()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodePbsDatablock->getSpecularGreen()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodePbsDatablock->getSpecularBlue()).toString();
    jsonString += "]\n";

    // End tag
    jsonString += TAB_QSTRING;
    jsonString += "}\n";
    jsonString += "}";

    // Write the file
    QString baseName = propertiesBaseName;
    if (propertiesBaseName == "")
    {
        QString type = "pbs_";
        baseName = type + mHlmsNodePbsDatablock->getName() + ".json";
    }

    mHelperString = CLIPBOARD_PATH_QSTRING + baseName;
    QFile file(mHelperString);
    if (file.open(QFile::WriteOnly|QFile::Truncate))
    {
        QTextStream stream(&file);
        stream << jsonString;
        file.close();
    }
    else
    {
        QMessageBox::information(0, QString("Error"), QString("Cannot save pbs properties"));
        Ogre::LogManager::getSingleton().logMessage("HlmsPropertiesPbsDatablock::saveProperties: Cannot save " + mHelperString.toStdString());
        mHelperString = "";
    }

    return mHelperString;
}
