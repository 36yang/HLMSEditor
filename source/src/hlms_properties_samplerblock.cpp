/****************************************************************************
**
** Copyright (C) 2016 - 2017
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "constants.h"
#include "asset_containerwidget.h"
#include "asset_propertywidget_texture.h"
#include "asset_propertywidget_color.h"
#include "asset_propertywidget_slider.h"
#include "asset_propertywidget_slider_decimal.h"
#include "asset_propertywidget_checkbox.h"
#include "asset_propertywidget_xy.h"
#include "asset_propertywidget_quaternion.h"
#include "hlms_properties_samplerblock.h"
#include "properties_dockwidget.h"
#include "hlms_node_samplerblock.h"
#include "hlms_pbs_builder.h"
#include "properties_dockwidget.h"
#include "rapidjson/document.h"

//****************************************************************************/
HlmsPropertiesSamplerblock::HlmsPropertiesSamplerblock(const QString& fileNameIcon,
                                                       PropertiesDockWidget* propertiesDockWidget,
                                                       QWidget* parent) :
    mPropertiesDockWidget(propertiesDockWidget),
    QWidget(parent)
{
    mHelperString = "";
    mHlmsNodeSamplerblock = 0;
    QVBoxLayout* mainLayout = new QVBoxLayout;
    mainLayout->setContentsMargins(0, 0, 0, 0);
    mAssetWidget = new Magus::QtAssetWidget(QString("Texture/Samplerblock"), fileNameIcon, this);
    mAssetWidget->setFileNameIconCollapsed(ASSET_ICON_COLLAPSE);
    mAssetWidget->setFileNameIconExpanded(ASSET_ICON_EXPAND);
    mAssetWidget->setHeaderAction2Icon(ICON_INFO);
    mAssetWidget->setHeaderTitleBold();
    connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));
    connect(mAssetWidget, SIGNAL(headerAction2Clicked()), this, SLOT(infoClicked(void)));

    // Create container - General
    Magus::QtContainerWidget* container = 0;
    container = mAssetWidget->createContainer(CONTAINER_SAMPLERBLOCK_GENERAL, QString("General"));
    container->setTitleBold(true);
    container = mAssetWidget->createContainer(CONTAINER_SAMPLERBLOCK_DETAILS, QString("Texture details"));
    container->setTitleBold(true);
    mDetailMapContainer = mAssetWidget->createContainer(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS, QString("Detail map"));
    container->setTitleBold(true);

    // Create properties
    // ******** Texture ********
    mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_GENERAL,
                                 PROPERTY_SAMPLERBLOCK_TEXTURE,
                                 QString("Texture"),
                                 Magus::QtProperty::TEXTURE);

    // ******** Enabled ********
    mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_GENERAL,
                                 PROPERTY_SAMPLERBLOCK_ENABLED,
                                 QString("Enabled"),
                                 Magus::QtProperty::CHECKBOX);

    // ******** Texture type ********
    QStringList stringListTextureType;
    stringListTextureType << QString("Diffuse map") <<
                             QString("Normal map") <<
                             QString("Specular / Metallic map") <<
                             QString("Roughness map") <<
                             QString("Detail weight map") <<
                             QString("Detail map 0") <<
                             QString("Detail map 1") <<
                             QString("Detail map 2") <<
                             QString("Detail map 3") <<
                             QString("Detail normal map 0") <<
                             QString("Detail normal map 1") <<
                             QString("Detail normal map 2") <<
                             QString("Detail normal map 3") <<
                             QString("Emissive map") <<
                             QString("Env. probe map");
    mTextureTypeSelectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_GENERAL,
                                          PROPERTY_SAMPLERBLOCK_TEXTURE_TYPE,
                                          QString("Texture type"),
                                          Magus::QtProperty::SELECT));
    mTextureTypeSelectProperty->addValues(stringListTextureType, 15); // Set to 15 and not to 14 so the last item is more visible on the screen
    mTextureTypeSelectProperty->setCurentIndex(-1); // To trigger propertyValueChanged when the texture is set

    // ******** Min filter ********
    QStringList stringListTextureFilterOptions;
    stringListTextureFilterOptions << QString("No filtering") <<
                                      QString("Point") <<
                                      QString("Linear") <<
                                      QString("Anisotropic");
    Magus::QtSelectProperty* selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_TEXTURE_MIN_FILTER,
                                          QString("Min filter"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureFilterOptions);

    // ******** Mag filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_TEXTURE_MAG_FILTER,
                                          QString("Mag filter"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureFilterOptions);

    // ******** Mip filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_TEXTURE_MIP_FILTER,
                                          QString("Mip filter"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureFilterOptions);

    // ******** Texture Addressing Mode U ********
    QStringList stringListTextureAddressingMode;
    stringListTextureAddressingMode << QString("Wrap") <<
                                      QString("Mirror") <<
                                      QString("Clamp") <<
                                      QString("Border");
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_U,
                                          QString("Texture Addressing Mode U"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureAddressingMode);

    // ******** Texture Addressing Mode V ********
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_V,
                                          QString("Texture Addressing Mode V"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureAddressingMode);

    // ******** Texture Addressing Mode W ********
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_W,
                                          QString("Texture Addressing Mode W"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureAddressingMode);

    // ******** Mip LOD Bias ********
    Magus::QtSliderDecimalProperty* sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MIPLOD_BIAS,
                                      QString("Mip LOD bias"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);

    // ******** Max Anisotropy ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MAX_ANISOTROPY,
                                      QString("Max anisotropy"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);

    // ******** Compare Function ********
    QStringList stringListCompareFunction;
    stringListCompareFunction << QString("Always fail") <<
                                 QString("Always pass") <<
                                 QString("Less") <<
                                 QString("Less equal") <<
                                 QString("Equal") <<
                                 QString("Not equal") <<
                                 QString("Greater equal") <<
                                 QString("Greater") <<
                                 QString("Disabled");
    Magus::QtSelectProperty* selectCompareFunctionProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_COMPARE_FUNCTION,
                                          QString("Compare Function"),
                                          Magus::QtProperty::SELECT));
    selectCompareFunctionProperty->addValues(stringListCompareFunction);

    // ******** Min LOD ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MIN_LOD,
                                      QString("Min LOD"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (-10000000.0f, 0.0f, 1.0f);

    // ******** Max LOD ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MAX_LOD,
                                      QString("Max LOD"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 10000000.0f, 1.0f);

    // ******** Border colour ********
    mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_BORDER_COLOUR,
                                 QString("Border colour [0..255]"),
                                 Magus::QtProperty::COLOR);

    // ******** UV set ********
    Magus::QtSliderProperty* sliderProperty = static_cast<Magus::QtSliderProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_UV_SET,
                                      QString("UV set [0..7]"),
                                      Magus::QtProperty::SLIDER));
    sliderProperty->setSliderRange (0, 7, 1);

    // ******** Detail: Blend mode ********
    QStringList stringListBlendMode;
    stringListBlendMode << QString("Regular alpha blending") <<
                           QString("Premultiplied alpha blending") <<
                           QString("Add") <<
                           QString("Subtract") <<
                           QString("Multiply") <<
                           QString("Multiply x 2") <<
                           QString("Screen") <<
                           QString("Overlay") <<
                           QString("Lighten") <<
                           QString("Darken") <<
                           QString("Grain extract") <<
                           QString("Grain merge") <<
                           QString("Difference");
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_BLEND_MODE,
                                          QString("Blend mode"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListBlendMode);

    // ******** Detail: Map weight (pbs only) ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MAP_WEIGTH,
                                      QString("Map weight"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 3.0f, 0.01f);

    // ******** Detail: Offset ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_OFFSET_U,
                                      QString("Offset U"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.01f);

    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_OFFSET_V,
                                      QString("Offset V"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.01f);

    // ******** Detail: Scale ********
    Magus::QtXYProperty* xyProperty = static_cast<Magus::QtXYProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_SCALE,
                                 QString("Scale"),
                                 Magus::QtProperty::XY));
    xyProperty->setLabelX("U");
    xyProperty->setLabelY("V");
    xyProperty->setVisible(false); // Make invisible by default

    // ******** Emissive: Colour ********
    mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_EMISSIVE_COLOUR,
                                 QString("Emissive colour [0..255]"),
                                 Magus::QtProperty::COLOR);

    // ******** Animation Matrix (unlit only) ********
    // Decompose in Scale, Rotate and Transform
    Magus::QtCheckBoxProperty* checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_ANIM_ENABLED,
                                          QString("Scale/Rotate/Transform enabled"),
                                          Magus::QtProperty::CHECKBOX));
    checkboxProperty->setVisible(false); // Make invisible by default
    checkboxProperty->setValue(false);

    xyProperty = static_cast<Magus::QtXYProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_ANIM_SCALE,
                                          QString("Scale"),
                                          Magus::QtProperty::XY));
    xyProperty->setLabelX("U");
    xyProperty->setLabelY("V");
    xyProperty->setVisible(false); // Make invisible by default

    Magus::QtQuaternionProperty* quaternionProperty = static_cast<Magus::QtQuaternionProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_ANIM_ROTATE,
                                 QString("Rotate"),
                                 Magus::QtProperty::QUATERNION));
    quaternionProperty->setVisible(false); // Make invisible by default

    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_U,
                                      QString("Offset U"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.01f);
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_V,
                                      QString("Offset V"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.01f);

    // Layout
    mainLayout->addWidget(mAssetWidget);
    setLayout(mainLayout);
    mAssetWidget->expandAllContainers();

    QSizePolicy sizePolicypRetain = sizePolicy();
    sizePolicypRetain.setRetainSizeWhenHidden(true);
    setSizePolicy(sizePolicypRetain);
}

//****************************************************************************/
HlmsPropertiesSamplerblock::~HlmsPropertiesSamplerblock(void)
{
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::setTextureTypePropertyVisible (bool visible)
{
    mTextureTypeSelectProperty->setVisible(visible);
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::setDetailMapWOSPropertiesVisible (bool visible)
{
    // Enable specific detail map properties, except for blend properties and emissive properties

    // Even if 'visible' is set to true, it is only allowed when it is a Pbs detail map or detail normal map
    if (visible && mHlmsNodeSamplerblock && !isDetailMapOrDetailNormalMap(mHlmsNodeSamplerblock->getTextureType()))
        visible = false;

    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAP_WEIGTH));
    sliderDecimalProperty->setVisible(visible);

    Magus::QtXYProperty* xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_SCALE));
    xyProperty->setVisible(visible);

    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET_U));
    sliderDecimalProperty->setVisible(visible);
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET_V));
    sliderDecimalProperty->setVisible(visible);

    // Emissive is handled different. Only in case there is an emissive map, it is displayed
    Magus::QtColorProperty* colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_EMISSIVE_COLOUR));
    Magus::QtSelectProperty* selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_TYPE));
    HlmsPbsBuilder hlmsPbsBuilder(0);
    bool emissiveVisible = hlmsPbsBuilder.getIndexFromTextureType (Ogre::PBSM_EMISSIVE) == selectProperty->getCurrentIndex();
    colorProperty->setVisible(emissiveVisible);
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::setDetailMapAnimationPropertiesVisible (bool visible)
{
    Magus::QtCheckBoxProperty* checkBoxProperty;
    Magus::QtXYProperty* xyProperty;
    Magus::QtQuaternionProperty* quaternionProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ENABLED));
    checkBoxProperty->setVisible(visible);

    // If not checked, keep the other properties invisible
    if (!checkBoxProperty->getValue())
    {
        xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_SCALE));
        xyProperty->setVisible(false);
        quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ROTATE));
        quaternionProperty->setVisible(false);
        sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_U));
        sliderDecimalProperty->setVisible(false);
        sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_V));
        sliderDecimalProperty->setVisible(false);
    }
    else
    {
        xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_SCALE));
        xyProperty->setVisible(visible);
        quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ROTATE));
        quaternionProperty->setVisible(visible);
        sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_U));
        sliderDecimalProperty->setVisible(visible);
        sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_V));
        sliderDecimalProperty->setVisible(visible);
    }
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::setObject (HlmsNodeSamplerblock* hlmsNodeSamplerblock)
{
    if (!hlmsNodeSamplerblock)
        return;

    mHlmsNodeSamplerblock = hlmsNodeSamplerblock;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtTextureProperty* textureProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtSliderProperty* sliderProperty;
    Magus::QtCheckBoxProperty* checkboxProperty;
    Magus::QtXYProperty* xyProperty;
    Magus::QtQuaternionProperty* quaternionProperty;

    // ******** Texture ********
    textureProperty = static_cast<Magus::QtTextureProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE));
    textureProperty->setTextureFileName(mHlmsNodeSamplerblock->getFileNameTexture());

    // ******** Enabled ********
    checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ENABLED));
    checkboxProperty->setValue(mHlmsNodeSamplerblock->getSamplerblockEnabled());

    // ******** Texture type ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_TYPE));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureType());

    // ******** Min filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_MIN_FILTER));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureMinFilter());

    // ******** Mag filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_MAG_FILTER));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureMagFilter());

    // ******** Mip filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_MIP_FILTER));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureMipFilter());

    // ******** Texture Addressing Mode U ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_U));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureAddressingModeU());

    // ******** Texture Addressing Mode V ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_V));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureAddressingModeV());

    // ******** Texture Addressing Mode W ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_W));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureAddressingModeW());

    // ******** Mip LOD Bias ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MIPLOD_BIAS));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMipLodBias());

    // ******** Max Anisotropy ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAX_ANISOTROPY));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMaxAnisotropy());

     // ******** Compare Function ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_COMPARE_FUNCTION));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getCompareFunction());

    // ******** Min LOD ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MIN_LOD));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMinLod());

    // ******** Max LOD ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAX_LOD));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMaxLod());

    // ******** Border colour ********
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_BORDER_COLOUR));
    colorProperty->setColor(mHlmsNodeSamplerblock->getBorderColourRed(),
                            mHlmsNodeSamplerblock->getBorderColourGreen(),
                            mHlmsNodeSamplerblock->getBorderColourBlue(),
                            255.0f);

    // ******** UV set ********
    sliderProperty = static_cast<Magus::QtSliderProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_UV_SET));
    sliderProperty->setValue((int)mHlmsNodeSamplerblock->getUvSet());

    // ******** Detail: Blend mode ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_BLEND_MODE));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getBlendMode());

    // ******** Detail: Map weight ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAP_WEIGTH));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMapWeight());

    // ******** Detail: Offset ********
    QVector2D v2 = mHlmsNodeSamplerblock->getOffset();
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET_U));
    sliderDecimalProperty->setValue(v2.x());
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET_V));
    sliderDecimalProperty->setValue(v2.y());

    // ******** Detail: Scale ********
    xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_SCALE));
    v2 = mHlmsNodeSamplerblock->getScale();
    //xyProperty->setXY(v2.x(), v2.y());
    xyProperty->setX(v2.x());
    xyProperty->setY(v2.y());

    // ******** Emissive: Colour ********
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_EMISSIVE_COLOUR));
    colorProperty->setColor(mHlmsNodeSamplerblock->getEmissiveColourRed(),
                            mHlmsNodeSamplerblock->getEmissiveColourGreen(),
                            mHlmsNodeSamplerblock->getEmissiveColourBlue(),
                            255.0f);

    // ******** Animation Matrix (unlit only) ********
    // Decompose in Scale, Rotate and Transform
    checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ENABLED));
    checkboxProperty->setValue(mHlmsNodeSamplerblock->getAnimationEnabled());

    xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_SCALE));
    v2 = mHlmsNodeSamplerblock->getAnimationScale();
    //xyProperty->setXY(v2.x(), v2.y());
    xyProperty->setX(v2.x());
    xyProperty->setY(v2.y());

    quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ROTATE));
    QQuaternion q = mHlmsNodeSamplerblock->getAnimationOrientation();
    quaternionProperty->setQuaternion(q);

    v2 = mHlmsNodeSamplerblock->getAnimationTranslate();
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_U));
    sliderDecimalProperty->setValue(v2.x());
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_V));
    sliderDecimalProperty->setValue(v2.y());
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::propertyValueChanged(QtProperty* property)
{
    if (!mHlmsNodeSamplerblock || !property)
        return;

    Magus::QtSelectProperty* selectProperty;
    Magus::QtTextureProperty* textureProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtSliderProperty* sliderProperty;
    Magus::QtCheckBoxProperty* checkboxProperty;
    Magus::QtXYProperty* xyProperty;
    Magus::QtQuaternionProperty* quaternionProperty;

    switch (property->mPropertyId)
    {
        case PROPERTY_SAMPLERBLOCK_TEXTURE:
        {
            textureProperty = static_cast<Magus::QtTextureProperty*>(property);
            mHlmsNodeSamplerblock->setFileNameTexture(textureProperty->getTextureFileName());
            mHlmsNodeSamplerblock->setBaseNameTexture(textureProperty->getTextureBaseFileName());
            mHlmsNodeSamplerblock->setPathTexture(textureProperty->getPathTexture());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ENABLED:
        {
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodeSamplerblock->setSamplerblockEnabled(checkboxProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_TEXTURE_TYPE:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureType(selectProperty->getCurrentIndex());
            setDetailMapWOSPropertiesVisible(true); // It is a Pbs, because the texture type is changed
        }
        break;

        case PROPERTY_SAMPLERBLOCK_TEXTURE_MIN_FILTER:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureMinFilter(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_TEXTURE_MAG_FILTER:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureMagFilter(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_TEXTURE_MIP_FILTER:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureMipFilter(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_U:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureAddressingModeU(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_V:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureAddressingModeV(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_W:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureAddressingModeW(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_MIPLOD_BIAS:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMipLodBias(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_MAX_ANISOTROPY:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMaxAnisotropy(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_COMPARE_FUNCTION:
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setCompareFunction(selectProperty->getCurrentIndex());
        break;

        case PROPERTY_SAMPLERBLOCK_MIN_LOD:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMinLod(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_MAX_LOD:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMaxLod(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_BORDER_COLOUR:
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(property);
            mHlmsNodeSamplerblock->setBorderColourRed(colorProperty->getRed());
            mHlmsNodeSamplerblock->setBorderColourGreen(colorProperty->getGreen());
            mHlmsNodeSamplerblock->setBorderColourBlue(colorProperty->getBlue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_UV_SET:
        {
            sliderProperty = static_cast<Magus::QtSliderProperty*>(property);
            mHlmsNodeSamplerblock->setUvSet(sliderProperty->getIntValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_BLEND_MODE:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setBlendMode(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_MAP_WEIGTH:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMapWeight(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_OFFSET_U:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            QVector2D v2 = mHlmsNodeSamplerblock->getOffset();
            v2.setX(sliderDecimalProperty->getValue());
            mHlmsNodeSamplerblock->setOffset(v2);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_OFFSET_V:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            QVector2D v2 = mHlmsNodeSamplerblock->getOffset();
            v2.setY(sliderDecimalProperty->getValue());
            mHlmsNodeSamplerblock->setOffset(v2);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_SCALE:
        {
            xyProperty = static_cast<Magus::QtXYProperty*>(property);
            QVector2D v2;
            v2.setX(xyProperty->getX());
            v2.setY(xyProperty->getY());
            mHlmsNodeSamplerblock->setScale(v2);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_EMISSIVE_COLOUR:
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(property);
            mHlmsNodeSamplerblock->setEmissiveColourRed(colorProperty->getRed());
            mHlmsNodeSamplerblock->setEmissiveColourGreen(colorProperty->getGreen());
            mHlmsNodeSamplerblock->setEmissiveColourBlue(colorProperty->getBlue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ANIM_ENABLED:
        {
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodeSamplerblock->setAnimationEnabled(checkboxProperty->getValue());
            setDetailMapAnimationPropertiesVisible (checkboxProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ANIM_SCALE:
        {
            xyProperty = static_cast<Magus::QtXYProperty*>(property);
            QVector2D v2;
            v2.setX(xyProperty->getX());
            v2.setY(xyProperty->getY());
            mHlmsNodeSamplerblock->setAnimationScale(v2);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ANIM_ROTATE:
        {
            quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(property);
            QQuaternion q;
            q.setX(quaternionProperty->getX());
            q.setY(quaternionProperty->getY());
            q.setZ(quaternionProperty->getZ());
            q.setScalar(quaternionProperty->getW());
            mHlmsNodeSamplerblock->setAnimationOrientation(q);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_U:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            QVector2D v2 = mHlmsNodeSamplerblock->getAnimationTranslate();
            v2.setX(sliderDecimalProperty->getValue());
            mHlmsNodeSamplerblock->setAnimationTranslate(v2);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_V:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            QVector2D v2 = mHlmsNodeSamplerblock->getAnimationTranslate();
            v2.setY(sliderDecimalProperty->getValue());
            mHlmsNodeSamplerblock->setAnimationTranslate(v2);
        }
        break;
}

    // Inform the propertiesDockWidget that a property is changed, so the material is rebuild
    mPropertiesDockWidget->notifyMaterialChanged(property);
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::infoClicked(void)
{
    PropertiesDockWidget* parent = static_cast<PropertiesDockWidget*>(parentWidget());
    parent->displayInfo(INFO_SAMPLERBLOCK, QString("Info"));
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::updateOffsetPropertiesExternal (HlmsNodeSamplerblock* hlmsNodeSamplerblock)
{
    if (!hlmsNodeSamplerblock)
        return;

    mHlmsNodeSamplerblock = hlmsNodeSamplerblock;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    QVector2D v2;
    if (mHlmsNodeSamplerblock->getAnimationEnabled())
    {
        Magus::QtCheckBoxProperty* checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ENABLED));
        checkBoxProperty->setValue(true);
        v2 = mHlmsNodeSamplerblock->getAnimationTranslate();
        sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_U));
        sliderDecimalProperty->setValueWithoutEmission(v2.x());
        sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_V));
        sliderDecimalProperty->setValueWithoutEmission(v2.y());
    }
    else
    {
        sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET_U));
        v2 = mHlmsNodeSamplerblock->getOffset();
        sliderDecimalProperty->setValueWithoutEmission(v2.x());
        sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET_V));
        sliderDecimalProperty->setValueWithoutEmission(v2.y());
    }
}

//****************************************************************************/
bool HlmsPropertiesSamplerblock::isDetailMapOrDetailNormalMap (unsigned int textureTypeIndex)
{
    // Must be [5..12]
    return (textureTypeIndex > 4 && textureTypeIndex < 13);
}

//****************************************************************************/
bool HlmsPropertiesSamplerblock::isSamplerProperties (const QString& propertiesName, bool fullName)
{
    QString fileName;
    if (fullName)
        fileName = propertiesName;
    else
        fileName = CLIPBOARD_PATH_QSTRING + propertiesName;
    QFile file(fileName);
    file.open(QFile::ReadOnly | QFile::Text);
    QTextStream readFile(&file);
    QString jsonString = readFile.readAll();
    QByteArray ba = jsonString.toLatin1();
    char* jsonChar = ba.data();

    rapidjson::Document d;
    d.Parse( jsonChar );
    if( d.HasParseError() )
        return false;

    rapidjson::Value::ConstMemberIterator itSampler = d.FindMember("sampler");
    return (itSampler != d.MemberEnd() && itSampler->value.IsObject());
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::loadProperties (const QString& propertiesName, bool fullName)
{
    QString fileName;
    if (fullName)
        fileName = propertiesName;
    else
        fileName = CLIPBOARD_PATH_QSTRING + propertiesName;
    QFile file(fileName);
    file.open(QFile::ReadOnly | QFile::Text);
    QTextStream readFile(&file);
    QString jsonString = readFile.readAll();
    QByteArray ba = jsonString.toLatin1();
    char* jsonChar = ba.data();

    rapidjson::Document d;
    d.Parse( jsonChar );
    if( d.HasParseError() )
    {
        QMessageBox::information(0, QString("Error"), QString("Cannot load sampler properties"));
        Ogre::LogManager::getSingleton().logMessage("HlmsPropertiesSamplerblock::loadProperties: Cannot parse " + fileName.toStdString());
    }

    Magus::QtTextureProperty* textureProperty;
    Magus::QtCheckBoxProperty* checkboxProperty;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtSliderProperty* sliderProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtXYProperty* xyProperty;
    Magus::QtQuaternionProperty* quaternionProperty;

    rapidjson::Value::ConstMemberIterator itSampler = d.FindMember("sampler");
    if (itSampler == d.MemberEnd() || !itSampler->value.IsObject() )
    {
        QMessageBox::information(0, QString("Error"), QString("Cannot load sampler properties"));
        Ogre::LogManager::getSingleton().logMessage("HlmsPropertiesSamplerblock::loadProperties: File " +
                                                    fileName.toStdString() +
                                                    " is not a sampler");
    }

    rapidjson::Value::ConstMemberIterator it = itSampler->value.MemberBegin();
    rapidjson::Value::ConstMemberIterator itEnd = itSampler->value.MemberEnd();
    while( it != itEnd )
    {
        Ogre::String name(it->name.GetString());
        if (name == "texture" && it->value.IsString())
        {
            // ******** Texture ********
            Ogre::String texture(it->value.GetString());
            textureProperty = static_cast<Magus::QtTextureProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE));
            textureProperty->setTextureFileName(texture.c_str());
        }
        if (name == "enabled" && it->value.IsBool())
        {
            // ******** Enabled ********
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ENABLED));
            checkboxProperty->setValue(it->value.GetBool());
        }
        if (name == "type" && it->value.IsInt())
        {
            // ******** Texture type ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_TYPE));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "min" && it->value.IsInt())
        {
            // ******** Min filter ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_MIN_FILTER));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "mag" && it->value.IsInt())
        {
            // ******** Mag filter ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_MAG_FILTER));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "mip" && it->value.IsInt())
        {
            // ******** Mip filter ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_MIP_FILTER));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "u" && it->value.IsInt())
        {
            // ******** Texture Addressing Mode U ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_U));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "v" && it->value.IsInt())
        {
            // ******** Texture Addressing Mode V ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_V));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "w" && it->value.IsInt())
        {
            // ******** Texture Addressing Mode W ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_W));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "miplodbias" && it->value.IsNumber())
        {
            // ******** Mip LOD Bias ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MIPLOD_BIAS));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "max_anisotropic" && it->value.IsNumber())
        {
            // ******** Max Anisotropy ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAX_ANISOTROPY));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "compare_function" && it->value.IsInt())
        {
            // ******** Compare Function ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_COMPARE_FUNCTION));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "min_lod" && it->value.IsNumber())
        {
            // ******** Min LOD ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MIN_LOD));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "max_lod" && it->value.IsNumber())
        {
            // ******** Max LOD ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAX_LOD));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "border" && it->value.IsArray())
        {
            // ******** Border colour ********
            colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_BORDER_COLOUR));
            const rapidjson::Value& array = it->value;
            float red = static_cast<float>(array[0].GetDouble());
            float green = static_cast<float>(array[1].GetDouble());
            float blue = static_cast<float>(array[2].GetDouble());
            colorProperty->setColor(red, green, blue, 255.0f);
        }
        if (name == "uv" && it->value.IsInt())
        {
            // ******** UV set ********
            sliderProperty = static_cast<Magus::QtSliderProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_UV_SET));
            sliderProperty->setValue(it->value.GetInt());
        }
        if (name == "blend_mode" && it->value.IsInt())
        {
            // ******** Detail: Blend mode ********
            selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_BLEND_MODE));
            selectProperty->setCurentIndex(it->value.GetInt());
        }
        if (name == "map_weight" && it->value.IsNumber())
        {
            // ******** Detail: Map weight ********
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAP_WEIGTH));
            sliderDecimalProperty->setValue(static_cast<float>(it->value.GetDouble()));
        }
        if (name == "offset" && it->value.IsArray())
        {
            // ******** Detail: Offset ********
            const rapidjson::Value& array = it->value;
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET_U));
            sliderDecimalProperty->setValue(static_cast<float>(array[0].GetDouble()));
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET_V));
            sliderDecimalProperty->setValue(static_cast<float>(array[1].GetDouble()));
        }
        if (name == "scale" && it->value.IsArray())
        {
            // ******** Detail: Scale ********
            xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_SCALE));
            const rapidjson::Value& array = it->value;
            xyProperty->setX(static_cast<float>(array[0].GetDouble()));
            xyProperty->setY(static_cast<float>(array[1].GetDouble()));
        }
        if (name == "anim_enabled" && it->value.IsBool())
        {
            // ******** Animation Matrix (unlit only) ********
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ENABLED));
            checkboxProperty->setValue(it->value.GetBool());
        }
        if (name == "anim_scale" && it->value.IsArray())
        {
            // Scale
            xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_SCALE));
            const rapidjson::Value& array = it->value;
            xyProperty->setX(static_cast<float>(array[0].GetDouble()));
            xyProperty->setY(static_cast<float>(array[1].GetDouble()));
        }
        if (name == "anim_rotate" && it->value.IsArray())
        {
            // Rotate
            quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ROTATE));
            const rapidjson::Value& array = it->value;
            quaternionProperty->setW(static_cast<float>(array[0].GetDouble()));
            quaternionProperty->setX(static_cast<float>(array[1].GetDouble()));
            quaternionProperty->setY(static_cast<float>(array[2].GetDouble()));
            quaternionProperty->setZ(static_cast<float>(array[3].GetDouble()));
        }
        if (name == "anim_translate" && it->value.IsArray())
        {
            // Translate
            const rapidjson::Value& array = it->value;
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_U));
            sliderDecimalProperty->setValue(static_cast<float>(array[0].GetDouble()));
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE_V));
            sliderDecimalProperty->setValue(static_cast<float>(array[1].GetDouble()));
        }
        if (name == "emissive_colour" && it->value.IsArray())
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_EMISSIVE_COLOUR));
            const rapidjson::Value& array = it->value;
            float red = static_cast<float>(array[0].GetDouble());
            float green = static_cast<float>(array[1].GetDouble());
            float blue = static_cast<float>(array[2].GetDouble());
            colorProperty->setColor(red, green, blue, 255.0f);
        }

        ++it;
    }
}

//****************************************************************************/
const QString& HlmsPropertiesSamplerblock::saveProperties (const QString& propertiesBaseName)
{
    mHelperString = "";

    if (!mHlmsNodeSamplerblock)
    {
        QMessageBox::information(0, QString("Error"), QString("Cannot save sampler properties"));
        Ogre::LogManager::getSingleton().logMessage("HlmsPropertiesSamplerblock::saveProperties: mHlmsNodeSamplerblock = 0");
        return mHelperString;
    }

    if (mHlmsNodeSamplerblock->getFileNameTexture() == "")
    {
        QMessageBox::information(0, QString("Error"), QString("Cannot save sampler properties"));
        Ogre::LogManager::getSingleton().logMessage("HlmsPropertiesSamplerblock::saveProperties: filename texture is empty");
        return mHelperString;
    }

    // Create the json structure
    QString jsonString;
    jsonString += "{\n";
    jsonString += TAB_QSTRING;
    jsonString += "\"sampler\" : \n";
    jsonString += TAB_QSTRING;
    jsonString += "{\n";

    // ******** Texture ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"texture\" : \"";
    jsonString += mHlmsNodeSamplerblock->getFileNameTexture();
    jsonString += "\",\n";

    // ******** Enabled ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"enabled\" : ";
    if (mHlmsNodeSamplerblock->getSamplerblockEnabled())
        jsonString += "true";
    else
        jsonString += "false";
    jsonString += ",\n";

    // ******** Texture type ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"type\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getTextureType()).toString();
    jsonString += ",\n";

    // ******** Min filter ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"min\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getTextureMinFilter()).toString();
    jsonString += ",\n";

    // ******** Mag filter ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"mag\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getTextureMagFilter()).toString();
    jsonString += ",\n";

    // ******** Mip filter ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"mip\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getTextureMipFilter()).toString();
    jsonString += ",\n";

    // ******** Texture Addressing Mode U ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"u\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getTextureAddressingModeU()).toString();
    jsonString += ",\n";

    // ******** Texture Addressing Mode V ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"v\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getTextureAddressingModeV()).toString();
    jsonString += ",\n";

    // ******** Texture Addressing Mode W ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"w\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getTextureAddressingModeW()).toString();
    jsonString += ",\n";

    // ******** Mip LOD Bias ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"miplodbias\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getMipLodBias()).toString();
    jsonString += ",\n";

    // ******** Max Anisotropy ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"max_anisotropic\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getMaxAnisotropy()).toString();
    jsonString += ",\n";

     // ******** Compare Function ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"compare_function\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getCompareFunction()).toString();
    jsonString += ",\n";

    // ******** Min LOD ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"min_lod\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getMinLod()).toString();
    jsonString += ",\n";

    // ******** Max LOD ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"max_lod\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getMaxLod()).toString();
    jsonString += ",\n";

    // ******** Border colour ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"border\" : [";
    jsonString += QVariant(mHlmsNodeSamplerblock->getBorderColourRed()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodeSamplerblock->getBorderColourGreen()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodeSamplerblock->getBorderColourBlue()).toString();
    jsonString += "],\n";

    // ******** UV set ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"uv\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getUvSet()).toString();
    jsonString += ",\n";

    // ******** Detail: Blend mode ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"blend_mode\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getBlendMode()).toString();
    jsonString += ",\n";

    // ******** Detail: Map weight ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"map_weight\" : ";
    jsonString += QVariant(mHlmsNodeSamplerblock->getMapWeight()).toString();
    jsonString += ",\n";

    // ******** Detail: Offset ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"offset\" : [";
    QVector2D v2 = mHlmsNodeSamplerblock->getOffset();
    jsonString += QVariant(v2.x()).toString();
    jsonString += ",";
    jsonString += QVariant(v2.y()).toString();
    jsonString += "],\n";

    // ******** Detail: Scale ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"scale\" : [";
    v2 = mHlmsNodeSamplerblock->getScale();
    jsonString += QVariant(v2.x()).toString();
    jsonString += ",";
    jsonString += QVariant(v2.y()).toString();
    jsonString += "],\n";

    // ******** Emissive: Colour ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"emissive_colour\" : [";
    jsonString += QVariant(mHlmsNodeSamplerblock->getEmissiveColourRed()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodeSamplerblock->getEmissiveColourGreen()).toString();
    jsonString += ",";
    jsonString += QVariant(mHlmsNodeSamplerblock->getEmissiveColourBlue()).toString();
    jsonString += "],\n";

    // ******** Animation Matrix (unlit only) ********
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"anim_enabled\" : ";
    if (mHlmsNodeSamplerblock->getAnimationEnabled())
        jsonString += "true";
    else
        jsonString += "false";
    jsonString += ",\n";

    // Scale
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"anim_scale\" : [";
    v2 = mHlmsNodeSamplerblock->getAnimationScale();
    jsonString += QVariant(v2.x()).toString();
    jsonString += ",";
    jsonString += QVariant(v2.y()).toString();
    jsonString += "],\n";

    // Rotate
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"anim_rotate\" : [";
    QQuaternion q = mHlmsNodeSamplerblock->getAnimationOrientation();
    jsonString += QVariant(q.scalar()).toString();
    jsonString += ",";
    jsonString += QVariant(q.x()).toString();
    jsonString += ",";
    jsonString += QVariant(q.y()).toString();
    jsonString += ",";
    jsonString += QVariant(q.z()).toString();
    jsonString += "],\n";

    // Translate
    jsonString += TWO_TAB_QSTRING;
    jsonString += "\"anim_translate\" : [";
    v2 = mHlmsNodeSamplerblock->getAnimationTranslate();
    jsonString += QVariant(v2.x()).toString();
    jsonString += ",";
    jsonString += QVariant(v2.y()).toString();
    jsonString += "]\n";

    // End tag
    jsonString += TAB_QSTRING;
    jsonString += "}\n";
    jsonString += "}";

    // Write the file
    QString baseName = propertiesBaseName;
    if (propertiesBaseName == "")
    {
        QString type;
        switch (mHlmsNodeSamplerblock->getTextureType())
        {
            case 0:
                type = "dif_";
            break;
            case 1:
                type = "nmm_";
            break;
            case 2:
                type = "spm_";
            break;
            case 3:
                type = "rgh_";
            break;
            case 4:
                type = "dtw_";
            break;
            case 5:
                type = "dt0_";
            break;
            case 6:
                type = "dt1_";
            break;
            case 7:
                type = "dt2_";
            break;
            case 8:
                type = "dt3_";
            break;
            case 9:
                type = "dn0_";
            break;
            case 10:
                type = "dn1_";
            break;
            case 11:
                type = "dn2_";
            break;
            case 12:
                type = "dn3_";
            break;
            case 13:
                type = "env_";
            break;
        }
        QFileInfo info (mHlmsNodeSamplerblock->getFileNameTexture());
        baseName = type + info.baseName() + QVariant(mHlmsNodeSamplerblock->getSequenceNumber()).toString() + ".json";
    }

    mHelperString = CLIPBOARD_PATH_QSTRING + baseName;
    QFile file(mHelperString);
    if (file.open(QFile::WriteOnly|QFile::Truncate))
    {
        QTextStream stream(&file);
        stream << jsonString;
        file.close();
    }
    else
    {
        QMessageBox::information(0, QString("Error"), QString("Cannot save sampler properties"));
        Ogre::LogManager::getSingleton().logMessage("HlmsPropertiesSamplerblock::saveProperties: Cannot save " + mHelperString.toStdString());
        mHelperString = "";
    }

    return mHelperString;
}
