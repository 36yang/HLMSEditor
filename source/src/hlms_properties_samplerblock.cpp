/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "constants.h"
#include "asset_containerwidget.h"
#include "asset_propertywidget_texture.h"
#include "asset_propertywidget_color.h"
#include "asset_propertywidget_slider.h"
#include "asset_propertywidget_slider_decimal.h"
#include "asset_propertywidget_checkbox.h"
#include "asset_propertywidget_xy.h"
#include "asset_propertywidget_quaternion.h"
#include "hlms_properties_samplerblock.h"
#include "properties_dockwidget.h"
#include "hlms_node_samplerblock.h"
#include "properties_dockwidget.h"

//****************************************************************************/
HlmsPropertiesSamplerblock::HlmsPropertiesSamplerblock(const QString& fileNameIcon,
                                                       PropertiesDockWidget* propertiesDockWidget,
                                                       QWidget* parent) :
    mPropertiesDockWidget(propertiesDockWidget),
    QWidget(parent)
{
    mHlmsNodeSamplerblock = 0;
    QVBoxLayout* mainLayout = new QVBoxLayout;
    mainLayout->setContentsMargins(0, 0, 0, 0);
    mAssetWidget = new Magus::QtAssetWidget(QString("Texture/Samplerblock"), fileNameIcon, this);
    mAssetWidget->setFileNameIconCollapsed(ASSET_ICON_COLLAPSE);
    mAssetWidget->setFileNameIconExpanded(ASSET_ICON_EXPAND);
    mAssetWidget->setHeaderAction2Icon(ICON_INFO);
    mAssetWidget->setHeaderTitleBold();
    connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));
    connect(mAssetWidget, SIGNAL(headerAction2Clicked()), this, SLOT(infoClicked(void)));

    // Create container - General
    Magus::QtContainerWidget* container = 0;
    container = mAssetWidget->createContainer(CONTAINER_SAMPLERBLOCK_GENERAL, QString("General"));
    container->setTitleBold(true);
    container = mAssetWidget->createContainer(CONTAINER_SAMPLERBLOCK_DETAILS, QString("Texture details"));
    container->setTitleBold(true);
    mDetailMapContainer = mAssetWidget->createContainer(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS, QString("Detail map"));
    container->setTitleBold(true);

    // Create properties
    // ******** Texture ********
    mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_GENERAL,
                                 PROPERTY_SAMPLERBLOCK_TEXTURE,
                                 QString("Texture"),
                                 Magus::QtProperty::TEXTURE);

    // ******** Enabled ********
    mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_GENERAL,
                                 PROPERTY_SAMPLERBLOCK_ENABLED,
                                 QString("Enabled"),
                                 Magus::QtProperty::CHECKBOX);

    // ******** Texture type ********
    QStringList stringListTextureType;
    stringListTextureType << QString("Diffuse map") <<
                             QString("Normal map") <<
                             QString("Specular / Metallic map") <<
                             QString("Roughness map") <<
                             QString("Detail weight map") <<
                             QString("Detail map 0") <<
                             QString("Detail map 1") <<
                             QString("Detail map 2") <<
                             QString("Detail map 3") <<
                             QString("Detail normal map 0") <<
                             QString("Detail normal map 1") <<
                             QString("Detail normal map 2") <<
                             QString("Detail normal map 3") <<
                             QString("Env. probe map");
    mTextureTypeSelectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_GENERAL,
                                          PROPERTY_SAMPLERBLOCK_TEXTURE_TYPE,
                                          QString("Texture type"),
                                          Magus::QtProperty::SELECT));
    mTextureTypeSelectProperty->addValues(stringListTextureType);
    mTextureTypeSelectProperty->setCurentIndex(-1); // To trigger propertyValueChanged when the texture is set

    // ******** Min filter ********
    QStringList stringListTextureFilterOptions;
    stringListTextureFilterOptions << QString("No filtering") <<
                                      QString("Point") <<
                                      QString("Linear") <<
                                      QString("Anisotropic");
    Magus::QtSelectProperty* selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_TEXTURE_MIN_FILTER,
                                          QString("Min filter"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureFilterOptions);

    // ******** Mag filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_TEXTURE_MAG_FILTER,
                                          QString("Mag filter"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureFilterOptions);

    // ******** Mip filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_TEXTURE_MIP_FILTER,
                                          QString("Mip filter"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureFilterOptions);

    // ******** Texture Addressing Mode U ********
    QStringList stringListTextureAddressingMode;
    stringListTextureAddressingMode << QString("Wrap") <<
                                      QString("Mirror") <<
                                      QString("Clamp") <<
                                      QString("Border");
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_U,
                                          QString("Texture Addressing Mode U"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureAddressingMode);

    // ******** Texture Addressing Mode V ********
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_V,
                                          QString("Texture Addressing Mode V"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureAddressingMode);

    // ******** Texture Addressing Mode W ********
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_W,
                                          QString("Texture Addressing Mode W"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListTextureAddressingMode);

    // ******** Mip LOD Bias ********
    Magus::QtSliderDecimalProperty* sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MIPLOD_BIAS,
                                      QString("Mip LOD bias"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);

    // ******** Max Anisotropy ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MAX_ANISOTROPY,
                                      QString("Max anisotropy"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);

    // ******** Compare Function ********
    QStringList stringListCompareFunction;
    stringListCompareFunction << QString("Always fail") <<
                                 QString("Always pass") <<
                                 QString("Less") <<
                                 QString("Less equal") <<
                                 QString("Equal") <<
                                 QString("Not equal") <<
                                 QString("Greater equal") <<
                                 QString("Greater") <<
                                 QString("Disabled");
    Magus::QtSelectProperty* selectCompareFunctionProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_COMPARE_FUNCTION,
                                          QString("Compare Function"),
                                          Magus::QtProperty::SELECT));
    selectCompareFunctionProperty->addValues(stringListCompareFunction);

    // ******** Min LOD ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MIN_LOD,
                                      QString("Min LOD"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);

    // ******** Max LOD ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MAX_LOD,
                                      QString("Max LOD"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 1.0f, 0.005f);

    // ******** Border colour ********
    mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_BORDER_COLOUR,
                                 QString("Border colour [0..255]"),
                                 Magus::QtProperty::COLOR);

    // ******** UV set ********
    Magus::QtSliderProperty* sliderProperty = static_cast<Magus::QtSliderProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_UV_SET,
                                      QString("UV set [0..7]"),
                                      Magus::QtProperty::SLIDER));
    sliderProperty->setSliderRange (0, 7, 1);

    // ******** Detail: Blend mode ********
    QStringList stringListBlendMode;
    stringListBlendMode << QString("Regular alpha blending") <<
                           QString("Premultiplied alpha blending") <<
                           QString("Add") <<
                           QString("Subtract") <<
                           QString("Multiply") <<
                           QString("Multiply x 2") <<
                           QString("Screen") <<
                           QString("Overlay") <<
                           QString("Lighten") <<
                           QString("Darken") <<
                           QString("Grain extract") <<
                           QString("Grain merge") <<
                           QString("Difference");
    selectProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_BLEND_MODE,
                                          QString("Blend mode"),
                                          Magus::QtProperty::SELECT));
    selectProperty->addValues(stringListBlendMode);

    // ******** Detail: Map weight (pbs only) ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>
        (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                      PROPERTY_SAMPLERBLOCK_MAP_WEIGTH,
                                      QString("Map weight"),
                                      Magus::QtProperty::SLIDER_DECIMAL));
    sliderDecimalProperty->setSliderRange (0.0f, 3.0f, 0.01f);

    // ******** Detail: Offset ********
    Magus::QtXYProperty* xyProperty = static_cast<Magus::QtXYProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_OFFSET,
                                 QString("Offset"),
                                 Magus::QtProperty::XY));
    xyProperty->setLabelX("U");
    xyProperty->setLabelY("V");

    // ******** Detail: Scale ********
    xyProperty = static_cast<Magus::QtXYProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_SCALE,
                                 QString("Scale"),
                                 Magus::QtProperty::XY));
    xyProperty->setLabelX("U");
    xyProperty->setLabelY("V");

    // ******** Animation Matrix (unlit only) ********
    // Decompose in Scale, Rotate and Transform
    Magus::QtCheckBoxProperty* checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                          PROPERTY_SAMPLERBLOCK_ANIM_ENABLED,
                                          QString("Scale/Rotate/Transform enabled"),
                                          Magus::QtProperty::CHECKBOX));
    checkboxProperty->setVisible(false); // Make invisible by default
    checkboxProperty->setValue(false);

    xyProperty = static_cast<Magus::QtXYProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_ANIM_SCALE,
                                 QString("Scale"),
                                 Magus::QtProperty::XY));
    xyProperty->setLabelX("U");
    xyProperty->setLabelY("V");
    xyProperty->setVisible(false); // Make invisible by default

    Magus::QtQuaternionProperty* quaternionProperty = static_cast<Magus::QtQuaternionProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_ANIM_ROTATE,
                                 QString("Rotate"),
                                 Magus::QtProperty::QUATERNION));
    quaternionProperty->setVisible(false); // Make invisible by default

    xyProperty = static_cast<Magus::QtXYProperty*>
            (mAssetWidget->createProperty(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS,
                                 PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE,
                                 QString("Translate"),
                                 Magus::QtProperty::XY));
    xyProperty->setLabelX("U");
    xyProperty->setLabelY("V");
    xyProperty->setVisible(false); // Make invisible by default

    // Layout
    mainLayout->addWidget(mAssetWidget);
    setLayout(mainLayout);
    mAssetWidget->expandAllContainers();
}

//****************************************************************************/
HlmsPropertiesSamplerblock::~HlmsPropertiesSamplerblock(void)
{
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::setTextureTypePropertyVisible (bool visible)
{
    mTextureTypeSelectProperty->setVisible(visible);
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::setDetailMapWOSPropertiesVisible (bool visible)
{
    // Enable specific detail map properties, except for blend properties
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAP_WEIGTH));
    sliderDecimalProperty->setVisible(visible);
    Magus::QtXYProperty* xyProperty;
    xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET));
    xyProperty->setVisible(visible);
    xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_SCALE));
    xyProperty->setVisible(visible);
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::setDetailMapAnimationPropertiesVisible (bool visible)
{
    Magus::QtCheckBoxProperty* checkBoxProperty;
    Magus::QtXYProperty* xyProperty;
    Magus::QtQuaternionProperty* quaternionProperty;
    checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ENABLED));
    checkBoxProperty->setVisible(visible);

    // If not checked, keep the other properties invisible
    if (!checkBoxProperty->getValue())
    {
        xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_SCALE));
        xyProperty->setVisible(false);
        quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ROTATE));
        quaternionProperty->setVisible(false);
        xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE));
        xyProperty->setVisible(false);
    }
    else
    {
        xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_SCALE));
        xyProperty->setVisible(visible);
        quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ROTATE));
        quaternionProperty->setVisible(visible);
        xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE));
        xyProperty->setVisible(visible);
    }
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::setObject (HlmsNodeSamplerblock* hlmsNodeSamplerblock)
{
    if (!hlmsNodeSamplerblock)
        return;

    mHlmsNodeSamplerblock = hlmsNodeSamplerblock;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtTextureProperty* textureProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtSliderProperty* sliderProperty;
    Magus::QtCheckBoxProperty* checkboxProperty;
    Magus::QtXYProperty* xyProperty;
    Magus::QtQuaternionProperty* quaternionProperty;

    // ******** Texture ********
    textureProperty = static_cast<Magus::QtTextureProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE));
    textureProperty->setTextureFileName(mHlmsNodeSamplerblock->getFileNameTexture());

    // ******** Enabled ********
    checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ENABLED));
    checkboxProperty->setValue(mHlmsNodeSamplerblock->getSamplerblockEnabled());

    // ******** Texture type ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_TYPE));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureType());

    // ******** Min filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_MIN_FILTER));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureMinFilter());

    // ******** Mag filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_MAG_FILTER));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureMagFilter());

    // ******** Mip filter ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_TEXTURE_MIP_FILTER));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureMipFilter());

    // ******** Texture Addressing Mode U ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_U));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureAddressingModeU());

    // ******** Texture Addressing Mode V ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_V));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureAddressingModeV());

    // ******** Texture Addressing Mode W ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_W));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getTextureAddressingModeW());

    // ******** Mip LOD Bias ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MIPLOD_BIAS));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMipLodBias());

    // ******** Max Anisotropy ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAX_ANISOTROPY));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMaxAnisotropy());

     // ******** Compare Function ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_COMPARE_FUNCTION));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getCompareFunction());

    // ******** Min LOD ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MIN_LOD));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMinLod());

    // ******** Max LOD ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAX_LOD));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMaxLod());

    // ******** Border colour ********
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_BORDER_COLOUR));
    colorProperty->setColor(mHlmsNodeSamplerblock->getBorderColourRed(),
                            mHlmsNodeSamplerblock->getBorderColourGreen(),
                            mHlmsNodeSamplerblock->getBorderColourBlue(),
                            255.0f);

    // ******** UV set ********
    sliderProperty = static_cast<Magus::QtSliderProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_UV_SET));
    sliderProperty->setValue((int)mHlmsNodeSamplerblock->getUvSet());

    // ******** Detail: Blend mode ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_BLEND_MODE));
    selectProperty->setCurentIndex(mHlmsNodeSamplerblock->getBlendMode());

    // ******** Detail: Map weight ********
    sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_MAP_WEIGTH));
    sliderDecimalProperty->setValue(mHlmsNodeSamplerblock->getMapWeight());

    // ******** Detail: Offset ********
    xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET));
    QVector2D v2 = mHlmsNodeSamplerblock->getOffset();
    xyProperty->setXY(v2.x(), v2.y());

    // ******** Detail: Scale ********
    xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_SCALE));
    v2 = mHlmsNodeSamplerblock->getScale();
    xyProperty->setXY(v2.x(), v2.y());

    // ******** Animation Matrix (unlit only) ********
    // Decompose in Scale, Rotate and Transform
    checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ENABLED));
    checkboxProperty->setValue(mHlmsNodeSamplerblock->getAnimationEnabled());

    xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_SCALE));
    v2 = mHlmsNodeSamplerblock->getAnimationScale();
    xyProperty->setXY(v2.x(), v2.y());

    quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ROTATE));
    QQuaternion q = mHlmsNodeSamplerblock->getAnimationOrientation();
    quaternionProperty->setQuaternion(q);

    xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE));
    v2 = mHlmsNodeSamplerblock->getAnimationTranslate();
    xyProperty->setXY(v2.x(), v2.y());
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::propertyValueChanged(QtProperty* property)
{
    if (!mHlmsNodeSamplerblock || !property)
        return;

    Magus::QtSelectProperty* selectProperty;
    Magus::QtTextureProperty* textureProperty;
    Magus::QtSliderDecimalProperty* sliderDecimalProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtSliderProperty* sliderProperty;
    Magus::QtCheckBoxProperty* checkboxProperty;
    Magus::QtXYProperty* xyProperty;
    Magus::QtQuaternionProperty* quaternionProperty;

    switch (property->mPropertyId)
    {
        case PROPERTY_SAMPLERBLOCK_TEXTURE:
        {
            textureProperty = static_cast<Magus::QtTextureProperty*>(property);
            mHlmsNodeSamplerblock->setFileNameTexture(textureProperty->getTextureFileName());
            mHlmsNodeSamplerblock->setBaseNameTexture(textureProperty->getTextureBaseFileName());
            mHlmsNodeSamplerblock->setPathTexture(textureProperty->getPathTexture());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ENABLED:
        {
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodeSamplerblock->setSamplerblockEnabled(checkboxProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_TEXTURE_TYPE:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureType(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_TEXTURE_MIN_FILTER:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureMinFilter(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_TEXTURE_MAG_FILTER:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureMagFilter(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_TEXTURE_MIP_FILTER:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureMipFilter(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_U:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureAddressingModeU(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_V:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureAddressingModeV(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ADDRESSING_MODE_W:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setTextureAddressingModeW(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_MIPLOD_BIAS:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMipLodBias(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_MAX_ANISOTROPY:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMaxAnisotropy(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_COMPARE_FUNCTION:
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setCompareFunction(selectProperty->getCurrentIndex());
        break;

        case PROPERTY_SAMPLERBLOCK_MIN_LOD:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMinLod(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_MAX_LOD:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMaxLod(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_BORDER_COLOUR:
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(property);
            mHlmsNodeSamplerblock->setBorderColourRed(colorProperty->getRed());
            mHlmsNodeSamplerblock->setBorderColourGreen(colorProperty->getGreen());
            mHlmsNodeSamplerblock->setBorderColourBlue(colorProperty->getBlue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_UV_SET:
        {
            sliderProperty = static_cast<Magus::QtSliderProperty*>(property);
            mHlmsNodeSamplerblock->setUvSet(sliderProperty->getIntValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_BLEND_MODE:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeSamplerblock->setBlendMode(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_MAP_WEIGTH:
        {
            sliderDecimalProperty = static_cast<Magus::QtSliderDecimalProperty*>(property);
            mHlmsNodeSamplerblock->setMapWeight(sliderDecimalProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_OFFSET:
        {
            xyProperty = static_cast<Magus::QtXYProperty*>(property);
            QVector2D v2;
            v2.setX(xyProperty->getX());
            v2.setY(xyProperty->getY());
            mHlmsNodeSamplerblock->setOffset(v2);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_SCALE:
        {
            xyProperty = static_cast<Magus::QtXYProperty*>(property);
            QVector2D v2;
            v2.setX(xyProperty->getX());
            v2.setY(xyProperty->getY());
            mHlmsNodeSamplerblock->setScale(v2);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ANIM_ENABLED:
        {
            checkboxProperty = static_cast<Magus::QtCheckBoxProperty*>(property);
            mHlmsNodeSamplerblock->setAnimationEnabled(checkboxProperty->getValue());
            xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS, PROPERTY_SAMPLERBLOCK_ANIM_SCALE));
            xyProperty->setVisible(checkboxProperty->getValue());
            quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(mAssetWidget->getPropertyWidget(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS, PROPERTY_SAMPLERBLOCK_ANIM_ROTATE));
            quaternionProperty->setVisible(checkboxProperty->getValue());
            xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(CONTAINER_SAMPLERBLOCK_DETAIL_MAP_DETAILS, PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE));
            xyProperty->setVisible(checkboxProperty->getValue());
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ANIM_SCALE:
        {
            xyProperty = static_cast<Magus::QtXYProperty*>(property);
            QVector2D v2;
            v2.setX(xyProperty->getX());
            v2.setY(xyProperty->getY());
            mHlmsNodeSamplerblock->setAnimationScale(v2);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ANIM_ROTATE:
        {
            quaternionProperty = static_cast<Magus::QtQuaternionProperty*>(property);
            QQuaternion q;
            q.setX(quaternionProperty->getX());
            q.setY(quaternionProperty->getY());
            q.setZ(quaternionProperty->getZ());
            q.setScalar(quaternionProperty->getW());
            mHlmsNodeSamplerblock->setAnimationOrientation(q);
        }
        break;

        case PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE:
        {
            xyProperty = static_cast<Magus::QtXYProperty*>(property);
            QVector2D v2;
            v2.setX(xyProperty->getX());
            v2.setY(xyProperty->getY());
            mHlmsNodeSamplerblock->setAnimationTranslate(v2);
        }
        break;
}

    // Inform the propertiesDockWidget that a property is changed, so the material is rebuild
    mPropertiesDockWidget->notifyHlmsChanged(property);
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::infoClicked(void)
{
    PropertiesDockWidget* parent = static_cast<PropertiesDockWidget*>(parentWidget());
    parent->displayInfo(INFO_SAMPLERBLOCK, QString("Info"));
}

//****************************************************************************/
void HlmsPropertiesSamplerblock::updateOffsetPropertiesExternal (HlmsNodeSamplerblock* hlmsNodeSamplerblock)
{
    mHlmsNodeSamplerblock = hlmsNodeSamplerblock;
    Magus::QtXYProperty* xyProperty;
    QVector2D v2;
    if (mHlmsNodeSamplerblock->getAnimationEnabled())
    {
        Magus::QtCheckBoxProperty* checkBoxProperty = static_cast<Magus::QtCheckBoxProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_ENABLED));
        checkBoxProperty->setValue(true);
        xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_ANIM_TRANSLATE));
        v2 = mHlmsNodeSamplerblock->getAnimationTranslate();
        xyProperty->setXY(v2.x(), v2.y());
    }
    else
    {
        xyProperty = static_cast<Magus::QtXYProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_SAMPLERBLOCK_OFFSET));
        v2 = mHlmsNodeSamplerblock->getOffset();
        xyProperty->setX(v2.x()); // Don't use setXY, because that function contains a bug
        xyProperty->setY(v2.y());
    }
}
