/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "constants.h"
#include "asset_containerwidget.h"
#include "asset_propertywidget.h"
#include "asset_propertywidget_color.h"
#include "asset_propertywidget_decimal.h"
#include "asset_propertywidget_select.h"
#include "asset_propertywidget_string.h"
#include "hlms_properties_unlit_datablock.h"
#include "properties_dockwidget.h"
#include "hlms_node_unlit_datablock.h"
#include "properties_dockwidget.h"

//****************************************************************************/
HlmsPropertiesUnlitDatablock::HlmsPropertiesUnlitDatablock(const QString& fileNameIcon,
                                                           PropertiesDockWidget* propertiesDockWidget,
                                                           QWidget* parent) :
    mPropertiesDockWidget(propertiesDockWidget),
    QWidget(parent)
{
    mHlmsNodeUnlitDatablock = 0;
    QVBoxLayout* mainLayout = new QVBoxLayout;
    mainLayout->setContentsMargins(0, 0, 0, 0);
    mAssetWidget = new Magus::QtAssetWidget(QString("Hlms Unlit"), fileNameIcon, this);
    mAssetWidget->setFileNameIconCollapsed(ASSET_ICON_COLLAPSE);
    mAssetWidget->setFileNameIconExpanded(ASSET_ICON_EXPAND);
    mAssetWidget->setHeaderAction2Icon(ICON_INFO);
    mAssetWidget->setHeaderTitleBold();
    connect(mAssetWidget, SIGNAL(valueChanged(QtProperty*)), this, SLOT(propertyValueChanged(QtProperty*)));
    connect(mAssetWidget, SIGNAL(headerAction2Clicked()), this, SLOT(infoClicked(void)));

    // Create container - General
    Magus::QtContainerWidget* container = 0;
    container = mAssetWidget->createContainer(CONTAINER_UNLIT_DATABLOCK_GENERAL, QString(""));

    // Create properties
    // ******** Name ********
    mAssetWidget->createProperty(CONTAINER_UNLIT_DATABLOCK_GENERAL,
                                 PROPERTY_UNLIT_DATABLOCK_NAME,
                                 QString("Name"),
                                 Magus::QtProperty::STRING);

    // ******** Colour ********
    mAssetWidget->createProperty(CONTAINER_UNLIT_DATABLOCK_GENERAL,
                                 PROPERTY_UNLIT_DATABLOCK_COLOUR,
                                 QString("Colour [0..255]"),
                                 Magus::QtProperty::COLOR);

    // ******** Alpha test ********
    // CMPF_ALWAYS_FAIL
    // CMPF_ALWAYS_PASS
    // CMPF_LESS
    // CMPF_LESS_EQUAL
    // CMPF_EQUAL
    // CMPF_NOT_EQUAL
    // CMPF_GREATER_EQUAL
    // CMPF_GREATER
    QStringList stringListCompareFunction;
    stringListCompareFunction << QString("Always fail") <<
                                 QString("Always pass") <<
                                 QString("Less") <<
                                 QString("Less equal") <<
                                 QString("Equal") <<
                                 QString("Not equal") <<
                                 QString("Greater equal") <<
                                 QString("Greater") <<
                                 QString("Disabled");
    Magus::QtSelectProperty* selectAlphaTestProperty = static_cast<Magus::QtSelectProperty*>
            (mAssetWidget->createProperty(CONTAINER_UNLIT_DATABLOCK_GENERAL,
                                          PROPERTY_UNLIT_DATABLOCK_ALPHATEST,
                                          QString("Alpha test"),
                                          Magus::QtProperty::SELECT));
    selectAlphaTestProperty->addValues(stringListCompareFunction);

    // ******** Alpha test threshold ********
    mAssetWidget->createProperty(CONTAINER_UNLIT_DATABLOCK_GENERAL,
                                 PROPERTY_UNLIT_DATABLOCK_ALPHATEST_THRESHOLD,
                                 QString("Alpha test threshold"),
                                 Magus::QtProperty::DECIMAL);

    // Layout
    mainLayout->addWidget(mAssetWidget);
    setLayout(mainLayout);
    mAssetWidget->expandAllContainers();
}

//****************************************************************************/
HlmsPropertiesUnlitDatablock::~HlmsPropertiesUnlitDatablock(void)
{
}

//****************************************************************************/
void HlmsPropertiesUnlitDatablock::setObject (HlmsNodeUnlitDatablock* hlmsNodeUnlitDatablock)
{
    if (!hlmsNodeUnlitDatablock)
        return;

    mHlmsNodeUnlitDatablock = hlmsNodeUnlitDatablock;
    Magus::QtDecimalProperty* decimalProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtStringProperty* stringProperty;

    // ******** Name ********
    stringProperty = static_cast<Magus::QtStringProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_UNLIT_DATABLOCK_NAME));
    stringProperty->setString(mHlmsNodeUnlitDatablock->getName());

    // ******** Colour ********
    colorProperty = static_cast<Magus::QtColorProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_UNLIT_DATABLOCK_COLOUR));
    colorProperty->setColor(mHlmsNodeUnlitDatablock->getColour());

    // ******** Alpha test ********
    selectProperty = static_cast<Magus::QtSelectProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_UNLIT_DATABLOCK_ALPHATEST));
    selectProperty->setCurentIndex(mHlmsNodeUnlitDatablock->getAlphaTest());

    // ******** Alpha test threshold ********
    decimalProperty = static_cast<Magus::QtDecimalProperty*>(mAssetWidget->getPropertyWidget(PROPERTY_UNLIT_DATABLOCK_ALPHATEST_THRESHOLD));
    decimalProperty->setValue(mHlmsNodeUnlitDatablock->getAlphaTestThreshold());
}

//****************************************************************************/
void HlmsPropertiesUnlitDatablock::propertyValueChanged(QtProperty* property)
{
    if (!mHlmsNodeUnlitDatablock || !property)
        return;

    Magus::QtDecimalProperty* decimalProperty;
    Magus::QtColorProperty* colorProperty;
    Magus::QtSelectProperty* selectProperty;
    Magus::QtStringProperty* stringProperty;

    switch (property->mPropertyId)
    {
        case PROPERTY_UNLIT_DATABLOCK_NAME:
        {
            stringProperty = static_cast<Magus::QtStringProperty*>(property);
            mHlmsNodeUnlitDatablock->setName(stringProperty->getString());
        }
        break;

        case PROPERTY_UNLIT_DATABLOCK_COLOUR:
        {
            colorProperty = static_cast<Magus::QtColorProperty*>(property);
            mHlmsNodeUnlitDatablock->setColour(colorProperty->getColor());
        }
        break;

        case PROPERTY_UNLIT_DATABLOCK_ALPHATEST:
        {
            selectProperty = static_cast<Magus::QtSelectProperty*>(property);
            mHlmsNodeUnlitDatablock->setAlphaTest(selectProperty->getCurrentIndex());
        }
        break;

        case PROPERTY_UNLIT_DATABLOCK_ALPHATEST_THRESHOLD:
        {
            decimalProperty = static_cast<Magus::QtDecimalProperty*>(property);
            mHlmsNodeUnlitDatablock->setAlphaTestThreshold(decimalProperty->getValue());
        }
        break;
    }

    // Inform the propertiesDockWidget that a property is changed, so the material is rebuild
    mPropertiesDockWidget->notifyHlmsChanged();
}

//****************************************************************************/
void HlmsPropertiesUnlitDatablock::infoClicked(void)
{
    PropertiesDockWidget* parent = static_cast<PropertiesDockWidget*>(parentWidget());
    parent->displayInfo(INFO_UNLIT, QString("Info"));
}
