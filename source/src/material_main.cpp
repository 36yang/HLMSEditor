/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QString>
#include <QFile>
#include <QMenuBar>
#include "magus_core.h"
#include "material_main.h"
#include "material_thumbs.h"

//****************************************************************************/
MaterialMain::MaterialMain(const QString& iconDir, QWidget* parent) : QMainWindow(parent), mIsClosing(false)
{
    mIconDir = iconDir;
    mSelectedFileName = "";

    // Perform standard functions
    createActions();
    createMenus();
    createToolBars();
    createStatusBar();
    createDockWindows();
    showMaximized();
}

//****************************************************************************/
MaterialMain::~MaterialMain(void)
{
}

//****************************************************************************/
QVector<Magus::QtResourceInfo*>& MaterialMain::getResources (void)
{
    // Delegate to mMaterialTreeDockWidget
    return mMaterialTreeDockWidget->getResources();
}

//****************************************************************************/
void MaterialMain::setResources (const QVector<Magus::QtResourceInfo*>& resources)
{
    // Delegate to mMaterialThumbsDockWidget
    mMaterialThumbsDockWidget->setResources(resources);

    // Delegate to mMaterialTreeDockWidget
    mMaterialTreeDockWidget->setResources(resources);
    mSelectedFileName = "";
}

//****************************************************************************/
void MaterialMain::addMaterial(const QString& baseNameJson,
                                 const QString& fullNameJson,
                                 const QString& baseNameThumb,
                                 EditorHlmsTypes type)
{
    if (mMaterialTreeDockWidget->addMaterial(baseNameJson, fullNameJson, baseNameThumb, type))
        mMaterialThumbsDockWidget->addMaterial(baseNameJson, fullNameJson, baseNameThumb, type);
}

//****************************************************************************/
void MaterialMain::initResourceTree(void)
{
    mMaterialTreeDockWidget->initializeResourceTree();
}

//****************************************************************************/
void MaterialMain::closeEvent(QCloseEvent* event)
{
    mIsClosing = true;
}

//****************************************************************************/
void MaterialMain::createActions(void)
{
}

//****************************************************************************/
void MaterialMain::createMenus(void)
{
}

//****************************************************************************/
void MaterialMain::createToolBars(void)
{
}

//****************************************************************************/
void MaterialMain::createStatusBar(void)
{
}

//****************************************************************************/
void MaterialMain::createDockWindows(void)
{
    // Sources (tree)
    mMaterialTreeDockWidget = new MaterialTreeDockWidget(mIconDir, QString("Sources"), this);
    connect(mMaterialTreeDockWidget, SIGNAL(resourceSelected(int,int,int,const QString&,const QString&)), this, SLOT(handleResourceSelected(int,int,int,const QString&,const QString&)));
    connect(mMaterialTreeDockWidget, SIGNAL(resourceDoubleClicked(int,int,int,QString,QString)), this, SLOT(handleResourceDoubleClicked(int,int,int,const QString&,const QString&)));
    connect(mMaterialTreeDockWidget, SIGNAL(resourceAdded(int,int,int,const QString&,const QString&)), this, SLOT(handleResourceAdded(int,int,int,const QString&,const QString&)));
    connect(mMaterialTreeDockWidget, SIGNAL(resourceDeleted(int,int,int,const QString&,const QString&)), this, SLOT(handleResourceDeleted(int,int,int,const QString&,const QString&)));
    connect(mMaterialTreeDockWidget, SIGNAL(resourceSearched(QString)), this, SLOT(handleResourceSearched(QString)));
    connect(mMaterialTreeDockWidget, SIGNAL(resourceSearchReset()), this, SLOT(handleResourceSearchReset()));
    addDockWidget(Qt::LeftDockWidgetArea, mMaterialTreeDockWidget);

    // Assets
    mMaterialThumbsDockWidget = new MaterialThumbsDockWidget(mIconDir, QString("Assets"), this);
    connect(mMaterialThumbsDockWidget, SIGNAL(tabChanged(int)), this, SLOT(handleTabChanged(int)));
    connect(mMaterialThumbsDockWidget, SIGNAL(assetSelected(QString,QString)), this, SLOT(handleThumbSelected(QString,QString)));
    connect(mMaterialThumbsDockWidget, SIGNAL(assetDoubleClicked(QString,QString)), this, SLOT(handleThumbDoubleClicked(QString,QString)));
    connect(mMaterialThumbsDockWidget, SIGNAL(assetDeleted(QString,QString)), this, SLOT(handleThumbDeleted(QString,QString)));
    addDockWidget(Qt::RightDockWidgetArea, mMaterialThumbsDockWidget);

    // Determine width of mMaterialThumbsDockWidget
    mMaterialThumbsDockWidget->setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Expanding);
    QRect rec = QApplication::desktop()->screenGeometry();
    mMaterialThumbsDockWidget->setMinimumWidth(0.45 * rec.width()); // Note that the parent is 0.7 * screenwidth
    mMaterialThumbsDockWidget->layout()->setSizeConstraint(QLayout::SetMinimumSize);
}

//****************************************************************************/
const QString& MaterialMain::getSelectedFullQualifiedName(void)
{
    return mMaterialTreeDockWidget->getSelectedFullQualifiedName();
}

//****************************************************************************/
void MaterialMain::update(void)
{
}

//****************************************************************************/
void MaterialMain::handleResourceSelected(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
{
    // Select the appropriate tab, based on the provided information
    mMaterialThumbsDockWidget->selectTab(toplevelId, parentId, resourceId, name, baseName); // activate the corresponding tab
    mMaterialThumbsDockWidget->setSelectThumb(toplevelId, baseName); // highlight the thumb
    mSelectedFileName = "";
}

//****************************************************************************/
void MaterialMain::handleResourceDoubleClicked(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
{
    if (Magus::fileExist(name))
    {
        emit jSonFileSelectedToProcess(name);
    }
    else
    {
        QMessageBox::StandardButton reply = fileDoesNotExistsWarning(name);
        if (reply == QMessageBox::Yes)
        {
            mMaterialTreeDockWidget->deleteAssetQuiet(baseName);
            mMaterialThumbsDockWidget->deleteAsset(toplevelId, baseName, false);
            mSelectedFileName = "";
        }
    }
}

//****************************************************************************/
void MaterialMain::handleResourceAdded(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
{
    // Add name to the mMaterialThumbsDockWidget
    mMaterialThumbsDockWidget->addAsset(toplevelId, parentId, resourceId, name, baseName);
    mSelectedFileName = name;
}

//****************************************************************************/
void MaterialMain::handleResourceDeleted(int toplevelId, int parentId, int resourceId, const QString& name, const QString& baseName)
{
    // Delete name from mMaterialThumbsDockWidget
    mMaterialThumbsDockWidget->deleteAsset(toplevelId, name, baseName);
    mSelectedFileName = "";
}

//****************************************************************************/
void MaterialMain::handleResourceSearched(const QString& searchPattern)
{
    // Apply filtering to mMaterialThumbsDockWidget
    mMaterialThumbsDockWidget->filter(searchPattern);
    mSelectedFileName = "";
}

//****************************************************************************/
void MaterialMain::handleResourceSearchReset(void)
{
    // Reset the filtering in mMaterialThumbsDockWidget
    mMaterialThumbsDockWidget->resetFilter();
    mSelectedFileName = "";
}

//****************************************************************************/
void MaterialMain::handleTabChanged(int toplevelId)
{
    // Set the correct toplevel group in mMaterialTreeDockWidget, based on the selected tab
    mMaterialTreeDockWidget->selectTopLevel(toplevelId);
    mSelectedFileName = "";
}

//****************************************************************************/
void MaterialMain::handleThumbDeleted(const QString& name, const QString& baseName)
{
    // Note, that name and baseName are related to thumb images. Do not use name, because
    // in mMaterialTreeDockWidget this applies to the filename of the json file
    // and not the filename of the thumb
    mMaterialTreeDockWidget->deleteAssetQuiet(baseName);
    mSelectedFileName = "";
}

//****************************************************************************/
void MaterialMain::handleThumbSelected(const QString& name, const QString& baseName)
{
    // Note, that name and baseName are related to thumb images. Do not use name, because
    // in mMaterialTreeDockWidget this applies to the filename of the json file
    // and not the filename of the thumb
    mSelectedFileName = mMaterialTreeDockWidget->setSelectAssetQuiet(baseName);
}

//****************************************************************************/
void MaterialMain::handleThumbDoubleClicked(const QString& name, const QString& baseName)
{
    // Note, that name and baseName are related to thumb images. Do not use name, because
    // in mMaterialTreeDockWidget this applies to the filename of the json file
    // and not the filename of the thumb
    mSelectedFileName = mMaterialTreeDockWidget->doubleClicked(baseName);
    if(Magus::fileExist(mSelectedFileName))
    {
        emit jSonFileSelectedToProcess(mSelectedFileName);
    }
    else
    {
        QMessageBox::StandardButton reply = fileDoesNotExistsWarning(mSelectedFileName);
        if (reply == QMessageBox::Yes)
        {
            mMaterialTreeDockWidget->deleteAssetQuiet(baseName);
            mMaterialThumbsDockWidget->deleteAsset(baseName, false);
            mSelectedFileName = "";
        }
    }
}

//****************************************************************************/
QMessageBox::StandardButton MaterialMain::fileDoesNotExistsWarning(const QString& fileName)
{
    return QMessageBox::question(0,
                                 "Warning",
                                 fileName + QString(" does not exist. Remove it from the material browser?"),
                                 QMessageBox::Yes|QMessageBox::No);
}

//****************************************************************************/
void MaterialMain::clearResources (void)
{
    mMaterialTreeDockWidget->clearContent();
    mMaterialThumbsDockWidget->clearContent();
}
