/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "constants.h"
#include "mainwindow.h"
#include "NodeEditor_dockwidget.h"
#include "OgreHlmsPbsDatablock.h"
#include "hlms_pbs_builder.h"
#include "hlms_unlit_builder.h"

//****************************************************************************/
NodeEditorDockWidget::NodeEditorDockWidget(QString title, MainWindow* parent, Qt::WindowFlags flags) : 
	QDockWidget (title, parent, flags), 
	mParent(parent)
{
    mInnerMain = new QMainWindow();
    setWidget(mInnerMain);

    // Perform standard functions
    createActions();
    createMenus();
    createToolBars();

    // Create the node editor widget.
    mNodeEditor = new Magus::QtNodeEditor(this);
    mNodeEditor->setMenuSelectionToCompoundEnabled(false); // Enabling this makes it a bit more complicated
    mNodeEditor->setMenuExpandCompoundsEnabled(false); // No compounds are used

    connect(mNodeEditor, SIGNAL(nodeToBeRemoved(QtNode*)), this, SLOT(nodeToBeDeleted(QtNode*)));
    connect(mNodeEditor, SIGNAL(nodeSelected(QtNode*)), this, SLOT(nodeSelected(QtNode*)));
    connect(mNodeEditor, SIGNAL(dropped()), this, SLOT(handleDropped()));
    mInnerMain->setCentralWidget(mNodeEditor);
    mHlmsPbsDatablockNode = 0;
    mHlmsUnlitDatablockNode = 0;
    mLatestDatablockName = DEFAULT_PBS_DATABLOCK_NAME;
    mCurrentDatablockName = DEFAULT_PBS_DATABLOCK_NAME;
    mHlmsPbsBuilder = new HlmsPbsBuilder(mNodeEditor);
    mHlmsUnlitBuilder = new HlmsUnlitBuilder(mNodeEditor);
    mNodeEditor->setZoom(0.9f);

    // Make some space
    setSizePolicy(QSizePolicy::Fixed, QSizePolicy::Expanding);
    QRect rec = QApplication::desktop()->screenGeometry();
    setMinimumHeight(0.1 * rec.height());
    layout()->setSizeConstraint(QLayout::SetMinimumSize);
}

//****************************************************************************/
NodeEditorDockWidget::~NodeEditorDockWidget(void)
{
    delete mHlmsPbsBuilder;
}

//****************************************************************************/
void NodeEditorDockWidget::generateDatablock (void)
{
    doCogHToolbarAction();
}

//****************************************************************************/
void NodeEditorDockWidget::createActions(void)
{
    mNewHlmsPbsDatablockMenuAction = new QAction(QString("New Hlms Pbs"), this);
    connect(mNewHlmsPbsDatablockMenuAction, SIGNAL(triggered()), this, SLOT(doNewHlmsPbsDatablockAction()));
    mNewHlmsUnlitDatablockMenuAction = new QAction(QString("New Hlms Unlit"), this);
    connect(mNewHlmsUnlitDatablockMenuAction, SIGNAL(triggered()), this, SLOT(doNewHlmsUnlitDatablockAction()));
    mNewSamplerblockMenuAction = new QAction(QString("New Texture/Samplerblock"), this);
    connect(mNewSamplerblockMenuAction, SIGNAL(triggered()), this, SLOT(doNewSamplerblockAction()));
    mNewBlendblockMenuAction = new QAction(QString("New Blendblock"), this);
    connect(mNewBlendblockMenuAction, SIGNAL(triggered()), this, SLOT(doNewBlendblockAction()));
    mNewMacroblockMenuAction = new QAction(QString("New Macroblock"), this);
    connect(mNewMacroblockMenuAction, SIGNAL(triggered()), this, SLOT(doNewMacroblockAction()));

    mNewHlmsPbsDatablockHToolbarAction = new QAction(QIcon(ICON_PBS_DATABLOCK), QString("New Hlms Pbs"), this);
    connect(mNewHlmsPbsDatablockHToolbarAction, SIGNAL(triggered()), this, SLOT(doNewHlmsPbsDatablockAction()));
    mNewHlmsUnlitDatablockHToolbarAction = new QAction(QIcon(ICON_UNLIT_DATABLOCK), QString("New Hlms Unlit"), this);
    connect(mNewHlmsUnlitDatablockHToolbarAction, SIGNAL(triggered()), this, SLOT(doNewHlmsUnlitDatablockAction()));
    mNewSamplerblockHToolbarAction = new QAction(QIcon(ICON_SAMPLERBLOCK), QString("New Texture/Samplerblock"), this);
    connect(mNewSamplerblockHToolbarAction, SIGNAL(triggered()), this, SLOT(doNewSamplerblockAction()));
    mNewBlendblockHToolbarAction = new QAction(QIcon(ICON_BLENDBLOCK), QString("New Blendblock"), this);
    connect(mNewBlendblockHToolbarAction, SIGNAL(triggered()), this, SLOT(doNewBlendblockAction()));
    mNewMacroblockHToolbarAction = new QAction(QIcon(ICON_MACROBLOCK), QString("New Macroblock"), this);
    connect(mNewMacroblockHToolbarAction, SIGNAL(triggered()), this, SLOT(doNewMacroblockAction()));
    mCogHToolbarAction = new QAction(QIcon(ICON_GENERATE), QString("Generate Hlms"), this);
    connect(mCogHToolbarAction, SIGNAL(triggered()), this, SLOT(doCogHToolbarAction()));
}

//****************************************************************************/
void NodeEditorDockWidget::createMenus(void)
{
    mDatablockMenu = mInnerMain->menuBar()->addMenu(QString("Hlms"));
    mDatablockMenu->addAction(mNewHlmsPbsDatablockMenuAction);
    mDatablockMenu->addAction(mNewHlmsUnlitDatablockMenuAction);
    mOtherblocksMenu = mInnerMain->menuBar()->addMenu(QString("Other blocks"));
    mOtherblocksMenu->addAction(mNewSamplerblockMenuAction);
    mOtherblocksMenu->addAction(mNewBlendblockMenuAction);
    mOtherblocksMenu->addAction(mNewMacroblockMenuAction);
}

//****************************************************************************/
void NodeEditorDockWidget::createToolBars(void)
{
    mHToolBar = new QToolBar();
    mInnerMain->addToolBar(Qt::TopToolBarArea, mHToolBar);
    mHToolBar->setMinimumHeight(32);
    mHToolBar->setMinimumWidth(8 * 32);
    mHToolBar->addAction(mNewHlmsPbsDatablockHToolbarAction);
    mHToolBar->addAction(mNewHlmsUnlitDatablockHToolbarAction);
    mHToolBar->addSeparator();
    mHToolBar->addAction(mNewSamplerblockHToolbarAction);
    mHToolBar->addAction(mNewBlendblockHToolbarAction);
    mHToolBar->addAction(mNewMacroblockHToolbarAction);
    mHToolBar->addSeparator();
    mHToolBar->addAction(mCogHToolbarAction);
}

//****************************************************************************/
void NodeEditorDockWidget::newHlmsPbsAndSampler()
{
    mNodeEditor->clear();
    mHlmsPbsDatablockNode = 0;
    mHlmsUnlitDatablockNode = 0;

    // Create a pbs and a sampler for convenience
    doNewHlmsPbsDatablockAction();
    doNewSamplerblockAction();
}

//****************************************************************************/
HlmsNodePbsDatablock* NodeEditorDockWidget::newHlmsPbs(void)
{
    mNodeEditor->clear();
    mHlmsPbsDatablockNode = 0;
    mHlmsUnlitDatablockNode = 0;

    // Create a pbs
    doNewHlmsPbsDatablockAction();
    return mHlmsPbsDatablockNode;
}

//****************************************************************************/
void NodeEditorDockWidget::newHlmsUnlitAndSampler()
{
    mNodeEditor->clear();
    mHlmsPbsDatablockNode = 0;
    mHlmsUnlitDatablockNode = 0;

    // Create an unlit and a sampler for convenience
    doNewHlmsUnlitDatablockAction();
    doNewSamplerblockAction();
}

//****************************************************************************/
HlmsNodeUnlitDatablock* NodeEditorDockWidget::newHlmsUnlit(void)
{
    mNodeEditor->clear();
    mHlmsUnlitDatablockNode = 0;
    mHlmsUnlitDatablockNode = 0;

    // Create an unlit
    doNewHlmsUnlitDatablockAction();
    return mHlmsUnlitDatablockNode;
}

//****************************************************************************/
HlmsNodePbsDatablock* NodeEditorDockWidget::createPbsNodeStructure(const QString& pbsDatablock)
{
    mHlmsPbsDatablockNode = mHlmsPbsBuilder->createPbsNodeStructure(mParent->getOgreManager(), pbsDatablock);
    mHlmsUnlitDatablockNode = 0;
    return mHlmsPbsDatablockNode;
}

//****************************************************************************/
HlmsNodeUnlitDatablock* NodeEditorDockWidget::createUnlitNodeStructure(const QString& unlitDatablock)
{
    mHlmsUnlitDatablockNode = mHlmsUnlitBuilder->createUnlitNodeStructure(mParent->getOgreManager(), unlitDatablock);
    mHlmsPbsDatablockNode = 0;
    return mHlmsUnlitDatablockNode;
}

//****************************************************************************/
const QString& NodeEditorDockWidget::getCurrentDatablockName(void)
{
    if (mHlmsPbsDatablockNode)
        mCurrentDatablockName = mHlmsPbsDatablockNode->getName();
    else if (mHlmsUnlitDatablockNode)
        mCurrentDatablockName = mHlmsUnlitDatablockNode->getName();

    return mCurrentDatablockName;
}

//****************************************************************************/
HlmsNodePbsDatablock* NodeEditorDockWidget::doNewHlmsPbsDatablockAction(void)
{
    // If mHlmsUnlitDatablockNode, then just return
    if (mHlmsUnlitDatablockNode)
    {
        mParent->mPropertiesDockWidget->setTextureTypePropertyVisible(false);
        mParent->mPropertiesDockWidget->setMapWeightPropertyVisible(false);
        return mHlmsPbsDatablockNode;
    }

    // Add an mHlmsPbsDatablockNode; only 1 is allowed
    if (!mHlmsPbsDatablockNode)
    {
        mHlmsPbsDatablockNode = mHlmsPbsBuilder->createPbsNode();
        mParent->mPropertiesDockWidget->setTextureTypePropertyVisible(true);
        mParent->mPropertiesDockWidget->setMapWeightPropertyVisible(true);
        mParent->initDatablocks();
    }

    return mHlmsPbsDatablockNode;
}

//****************************************************************************/
HlmsNodeUnlitDatablock* NodeEditorDockWidget::doNewHlmsUnlitDatablockAction(void)
{
    // If mHlmsPbsDatablockNode, then just return
    if (mHlmsPbsDatablockNode)
    {
        mParent->mPropertiesDockWidget->setTextureTypePropertyVisible(true);
        mParent->mPropertiesDockWidget->setMapWeightPropertyVisible(true);
        return mHlmsUnlitDatablockNode;
    }

    // Add an mHlmsUnlitDatablockNode; only 1 is allowed
    if (!mHlmsUnlitDatablockNode)
    {
        mHlmsUnlitDatablockNode = mHlmsUnlitBuilder->createUnlitNode();
        mParent->mPropertiesDockWidget->setTextureTypePropertyVisible(false);
        mParent->mPropertiesDockWidget->setMapWeightPropertyVisible(false);
        mParent->initDatablocks();
    }

    return mHlmsUnlitDatablockNode;
}

//****************************************************************************/
HlmsNodeSamplerblock* NodeEditorDockWidget::doNewSamplerblockAction(void)
{
    HlmsNodeSamplerblock* sampler = mHlmsPbsBuilder->createSamplerNode(mNodeEditor);
    if (!sampler)
        return 0;

    if (mHlmsPbsDatablockNode)
    {
        mParent->mPropertiesDockWidget->setTextureTypePropertyVisible(true);
        mParent->mPropertiesDockWidget->setMapWeightPropertyVisible(true);
        mHlmsPbsBuilder->connectNodes(mHlmsPbsDatablockNode, sampler);
    }
    else if (mHlmsUnlitDatablockNode)
    {
        mParent->mPropertiesDockWidget->setTextureTypePropertyVisible(false);
        mParent->mPropertiesDockWidget->setMapWeightPropertyVisible(false);
        mHlmsUnlitBuilder->connectNodes(mHlmsUnlitDatablockNode, sampler);
    }

    return sampler;
}

//****************************************************************************/
void NodeEditorDockWidget::doNewBlendblockAction(void)
{
    HlmsNodeBlendblock* blendblock = new HlmsNodeBlendblock(NODE_TITLE_BLENDBLOCK);
    if (!blendblock)
        return;

    blendblock->setType(NODE_TYPE_BLENDBLOCK);
    mNodeEditor->addNode(blendblock);
    if (mHlmsPbsDatablockNode)
        mHlmsPbsBuilder->connectNodes(mHlmsPbsDatablockNode, blendblock);
    else if (mHlmsUnlitDatablockNode)
        mHlmsUnlitBuilder->connectNodes(mHlmsUnlitDatablockNode, blendblock);
}

//****************************************************************************/
void NodeEditorDockWidget::doNewMacroblockAction(void)
{
    HlmsNodeMacroblock* macroblock = new HlmsNodeMacroblock(NODE_TITLE_MACROBLOCK);
    if (!macroblock)
        return;

    macroblock->setType(NODE_TYPE_MACROBLOCK);
    mNodeEditor->addNode(macroblock);
    if (mHlmsPbsDatablockNode)
        mHlmsPbsBuilder->connectNodes(mHlmsPbsDatablockNode, macroblock);
    else if (mHlmsUnlitDatablockNode)
        mHlmsUnlitBuilder->connectNodes(mHlmsUnlitDatablockNode, macroblock);
}

//****************************************************************************/
void NodeEditorDockWidget::doCogHToolbarAction(void)
{
    // Construct a datablock and set it to the current item in the renderwindow
    if (mHlmsPbsDatablockNode)
    {
        mParent->mPropertiesDockWidget->setTextureTypePropertyVisible(true);
        mParent->mPropertiesDockWidget->setMapWeightPropertyVisible(true);
        mCurrentDatablockName = mHlmsPbsDatablockNode->getName();
        Magus::OgreManager* ogreManager = mParent->getOgreManager();
        mParent->initDatablocks();
        Ogre::HlmsPbsDatablock* datablock = mHlmsPbsBuilder->createPbsDatablock(ogreManager, mHlmsPbsDatablockNode);
        if (datablock)
            mLatestDatablockName = mHlmsPbsDatablockNode->getName();
    }
    else if (mHlmsUnlitDatablockNode)
    {
        mParent->mPropertiesDockWidget->setTextureTypePropertyVisible(false);
        mParent->mPropertiesDockWidget->setMapWeightPropertyVisible(false);
        mCurrentDatablockName = mHlmsUnlitDatablockNode->getName();
        Magus::OgreManager* ogreManager = mParent->getOgreManager();
        mParent->initDatablocks();
        Ogre::HlmsUnlitDatablock* datablock = mHlmsUnlitBuilder->createUnlitDatablock(ogreManager, mHlmsUnlitDatablockNode);
        if (datablock)
            mLatestDatablockName = mHlmsUnlitDatablockNode->getName();
    }
}

//****************************************************************************/
void NodeEditorDockWidget::nodeToBeDeleted(QtNode* node)
{
    if (mHlmsPbsDatablockNode == node)
    {
        Magus::OgreManager* ogreManager = mParent->getOgreManager();
        mHlmsPbsBuilder->deletePbsDatablock(ogreManager, mHlmsPbsDatablockNode->getName());
        mHlmsPbsDatablockNode = 0;
        mParent->initDatablocks();
    }
    else if (mHlmsUnlitDatablockNode == node)
    {
        Magus::OgreManager* ogreManager = mParent->getOgreManager();
        mHlmsUnlitBuilder->deleteUnlitDatablock(ogreManager, mHlmsUnlitDatablockNode->getName());
        mHlmsUnlitDatablockNode = 0;
        mParent->initDatablocks();
    }
}

//****************************************************************************/
void NodeEditorDockWidget::nodeSelected(QtNode* node)
{
    if (!node)
        return;

    if (node->getTitle() == NODE_TITLE_PBS_DATABLOCK)
    {
        HlmsPropertiesPbsDatablock* hlmsPropertiesPbsDatablock = mParent->mPropertiesDockWidget->mHlmsPropertiesPbsDatablock;
        hlmsPropertiesPbsDatablock->setObject(static_cast<HlmsNodePbsDatablock*>(node));
        mParent->mPropertiesDockWidget->setHlmsPropertiesPbsDatablockVisible(true);
    }
    else if (node->getTitle() == NODE_TITLE_UNLIT_DATABLOCK)
    {
        HlmsPropertiesUnlitDatablock* hlmsPropertiesUnlitDatablock = mParent->mPropertiesDockWidget->mHlmsPropertiesUnlitDatablock;
        hlmsPropertiesUnlitDatablock->setObject(static_cast<HlmsNodeUnlitDatablock*>(node));
        mParent->mPropertiesDockWidget->setHlmsPropertiesUnlitDatablockVisible(true);
    }
    else if (node->getTitle() == NODE_TITLE_SAMPLERBLOCK)
    {
        HlmsPropertiesSamplerblock* hlmsPropertiesSamplerblock = mParent->mPropertiesDockWidget->mHlmsPropertiesSamplerblock;
        hlmsPropertiesSamplerblock->setObject(static_cast<HlmsNodeSamplerblock*>(node));
        mParent->mPropertiesDockWidget->setHlmsPropertiesSamplerblockVisible(true);
    }
    else if (node->getTitle() == NODE_TITLE_MACROBLOCK)
    {
        HlmsPropertiesMacroblock* hlmsPropertiesMacroblock = mParent->mPropertiesDockWidget->mHlmsPropertiesMacroblock;
        hlmsPropertiesMacroblock->setObject(static_cast<HlmsNodeMacroblock*>(node));
        mParent->mPropertiesDockWidget->setHlmsPropertiesMacroblockVisible(true);
    }
    else if (node->getTitle() == NODE_TITLE_BLENDBLOCK)
    {
        HlmsPropertiesBlendblock* hlmsPropertiesBlendblock = mParent->mPropertiesDockWidget->mHlmsPropertiesBlendblock;
        hlmsPropertiesBlendblock->setObject(static_cast<HlmsNodeBlendblock*>(node));
        mParent->mPropertiesDockWidget->setHlmsPropertiesBlendblockVisible(true);
    }
}

//****************************************************************************/
EditorHlmsTypes NodeEditorDockWidget::getCurrentDatablockType(void)
{
    if (mHlmsPbsDatablockNode)
        return EditorHlmsTypes::HLMS_PBS;
    else if (mHlmsUnlitDatablockNode)
        return EditorHlmsTypes::HLMS_UNLIT;

    return EditorHlmsTypes::HLMS_NONE;
}

//****************************************************************************/
void NodeEditorDockWidget::handleDropped (void)
{
    // Something was dropped on the node editor. This must be either the texture thumb or and item from the texture tree
    // Use the currently selected item in the tree and create a texture/sampler node
    // nB: When a file from the file explorer is dropped, this function will not take that into account
    // It currently assumes that it came from the texture tree- or thumbs widget
    HlmsNodeSamplerblock* samplerNode = doNewSamplerblockAction();
    if (samplerNode)
    {
        QString fileName = mParent->mTextureDockWidget->getCurrentFileName();
        samplerNode->setFileNameTexture(fileName);
        nodeSelected(samplerNode);
    }
}
