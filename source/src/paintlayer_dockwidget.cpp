/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QMessageBox>
#include "paintlayer_dockwidget.h"
#include "paintlayer_manager.h"
#include "mainwindow.h"
#include "constants.h"

//****************************************************************************/
PaintLayerDockWidget::PaintLayerDockWidget(PaintLayerManager* paintLayerManager,
                                           QString title,
                                           MainWindow* parent,
                                           Qt::WindowFlags flags) :
    QDockWidget (title, parent, flags),
    mParent(parent),
    mPaintLayerManager(paintLayerManager)
{
    mPaintLayerWidget = new PaintLayerWidget(ICON_PATH, this);
    setWidget(mPaintLayerWidget);
    connect(mPaintLayerWidget, SIGNAL(layerCreatedOrAdded(int,QString)), this, SLOT(handleNewLayer(int,QString)));
    connect(mPaintLayerWidget, SIGNAL(layerDeleted(int,QString)), this, SLOT(handleDeleteLayer(int,QString)));
    connect(mPaintLayerWidget, SIGNAL(layerTextureTypeSelected(int,QString)), this, SLOT(handleTextureTypeSelected(int,QString)));
}

//****************************************************************************/
PaintLayerDockWidget::~PaintLayerDockWidget(void)
{
}

//****************************************************************************/
void PaintLayerDockWidget::handleNewLayer (int layerId, QString layerName)
{
    // A new layer has been created; create a paint layer by means of the PaintLayerManager
    mPaintLayerManager->createPaintLayer(layerId);

    QMessageBox::information(0, QString("handleNewLayer: "), QVariant(layerId).toString()); // test
}

//****************************************************************************/
void PaintLayerDockWidget::handleDeleteLayer (int layerId, QString layerName)
{
    // A new layer has been created; delete the paint layer by means of the PaintLayerManager
    mPaintLayerManager->removeAndDeletePaintLayer(layerId);

    QMessageBox::information(0, QString("handleDeleteLayer: "), QVariant(layerId).toString()); // test
}

//****************************************************************************/
void PaintLayerDockWidget::handleTextureTypeSelected(int layerId, QString textureType)
{
    // Convert texture type to a real Pbs texture type
    Ogre::PbsTextureTypes type;
    if (textureType == QString("Diffuse map"))
        type = Ogre::PBSM_DIFFUSE;
    else if (textureType == QString("Normal map"))
        type = Ogre::PBSM_NORMAL;
    else if (textureType == QString("Specular / Metallic map"))
        type = Ogre::PBSM_SPECULAR;
    else if (textureType == QString("Roughness map"))
        type = Ogre::PBSM_ROUGHNESS;
    else if (textureType == QString("Detail weight map"))
        type = Ogre::PBSM_DETAIL_WEIGHT;
    else if (textureType == QString("Detail map 0"))
        type = Ogre::PBSM_DETAIL0;
    else if (textureType == QString("Detail map 1"))
        type = Ogre::PBSM_DETAIL1;
    else if (textureType == QString("Detail map 2"))
        type = Ogre::PBSM_DETAIL2;
    else if (textureType == QString("Detail map 3"))
        type = Ogre::PBSM_DETAIL3;
    else if (textureType == QString("Detail normal map 0"))
        type = Ogre::PBSM_DETAIL0_NM;
    else if (textureType == QString("Detail normal map 1"))
        type = Ogre::PBSM_DETAIL1_NM;
    else if (textureType == QString("Detail normal map 2"))
        type = Ogre::PBSM_DETAIL2_NM;
    else if (textureType == QString("Detail normal map 3"))
        type = Ogre::PBSM_DETAIL3_NM;
    else if (textureType == QString("Env. probe map"))
        type = Ogre::PBSM_REFLECTION;
    else
        return; // Unknown texture type

    // Retrieve the texture filename from the parent
    Ogre::String fileName = mParent->getTextureFileNameOfPbs(mParent->getCurrentDatablockName(), type);
    if (fileName == "")
        return; // Apparently there is no texture with that name

    // Set the datablockName, texturetype and texturefile name in the Paintlayer
    mPaintLayerManager->setTextureLayerInPaintLayer(mParent->getCurrentDatablockName(), type, fileName, layerId);
}
