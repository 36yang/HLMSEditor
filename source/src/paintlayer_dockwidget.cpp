/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include <QMessageBox>
#include "OgreRoot.h"
#include "OgreHlmsPbs.h"
#include "OgreHlmsPbsDatablock.h"
#include "OgreHlmsManager.h"
#include "paintlayer_dockwidget.h"
#include "paintlayer_manager.h"
#include "mainwindow.h"
#include "constants.h"

//****************************************************************************/
PaintLayerDockWidget::PaintLayerDockWidget(PaintLayerManager* paintLayerManager,
                                           QString title,
                                           MainWindow* parent,
                                           Qt::WindowFlags flags) :
    QDockWidget (title, parent, flags),
    mParent(parent),
    mPaintLayerManager(paintLayerManager)
{
    mHelperString = "";
    mPaintLayerWidget = new PaintLayerWidget(ICON_PATH, this);
    setWidget(mPaintLayerWidget);
    connect(mPaintLayerWidget, SIGNAL(layerCreatedOrAdded(int,QString)), this, SLOT(handleNewLayer(int,QString)));
    connect(mPaintLayerWidget, SIGNAL(layerDeleted(int,QString)), this, SLOT(handleDeleteLayer(int,QString)));
    connect(mPaintLayerWidget, SIGNAL(layerSelected(int,QString)), this, SLOT(handleLayerSelected(int,QString)));
}

//****************************************************************************/
PaintLayerDockWidget::~PaintLayerDockWidget(void)
{
}

//****************************************************************************/
bool PaintLayerDockWidget::currentDatablockExists(void)
{
    return (mParent->getCurrentDatablockName() != "");
}

//****************************************************************************/
bool PaintLayerDockWidget::currentDatablockIsPbs(void)
{
    return (mParent->getCurrentDatablockType() == HLMS_PBS);
}

//****************************************************************************/
void PaintLayerDockWidget::newHlmsCreated (void)
{
    // Destroy all PaintLayer objects
    mPaintLayerManager->removeAndDeleteAllPaintLayers();

    // Delete all layers in the PaintL layer widget
    mPaintLayerWidget->deleteAllLayers();
}

//****************************************************************************/
void PaintLayerDockWidget::handleNewLayer (int layerId, QString layerName)
{
    // A new layer has been created; create a paint layer by means of the PaintLayerManager
    PaintLayer* paintLayer = mPaintLayerManager->createPaintLayer(layerId);
    if (paintLayer)
        paintLayer->setBrush(BRUSH_PATH + "brush_002.png"); // TEST
        //paintLayer->setBrush(BRUSH_PATH + DEFAULT_BRUSH); // Set a default

    //QMessageBox::information(0, QString("handleNewLayer: "), QVariant(layerId).toString()); // test
}

//****************************************************************************/
void PaintLayerDockWidget::handleDeleteLayer (int layerId, QString layerName)
{
    // A new layer has been created; delete the paint layer by means of the PaintLayerManager
    mPaintLayerManager->removeAndDeletePaintLayer(layerId);

    //QMessageBox::information(0, QString("handleDeleteLayer: "), QVariant(layerId).toString()); // test
}

//****************************************************************************/
void PaintLayerDockWidget::setTextureType (int layerId, QString textureType)
{
    // Convert texture type to a real Pbs texture type
    Ogre::PbsTextureTypes type;
    if (textureType == PBSM_DIFFUSE_QSTRING)
        type = Ogre::PBSM_DIFFUSE;
    else if (textureType == PBSM_NORMAL_QSTRING)
        type = Ogre::PBSM_NORMAL;
    else if (textureType == PBSM_SPECULAR_QSTRING)
        type = Ogre::PBSM_SPECULAR;
    else if (textureType == PBSM_ROUGHNESS_QSTRING)
        type = Ogre::PBSM_ROUGHNESS;
    else if (textureType == PBSM_DETAIL_WEIGHT_QSTRING)
        type = Ogre::PBSM_DETAIL_WEIGHT;
    else if (textureType == PBSM_DETAIL0_QSTRING)
        type = Ogre::PBSM_DETAIL0;
    else if (textureType == PBSM_DETAIL1_QSTRING)
        type = Ogre::PBSM_DETAIL1;
    else if (textureType == PBSM_DETAIL2_QSTRING)
        type = Ogre::PBSM_DETAIL2;
    else if (textureType == PBSM_DETAIL3_QSTRING)
        type = Ogre::PBSM_DETAIL3;
    else if (textureType == PBSM_DETAIL0_NM_QSTRING)
        type = Ogre::PBSM_DETAIL0_NM;
    else if (textureType == PBSM_DETAIL1_NM_QSTRING)
        type = Ogre::PBSM_DETAIL1_NM;
    else if (textureType == PBSM_DETAIL2_NM_QSTRING)
        type = Ogre::PBSM_DETAIL2_NM;
    else if (textureType == PBSM_DETAIL3_NM_QSTRING)
        type = Ogre::PBSM_DETAIL3_NM;
    else if (textureType == PBSM_REFLECTION_QSTRING)
        type = Ogre::PBSM_REFLECTION;
    else
        return; // Unknown texture type

    // Retrieve the texture filename from the parent
    Ogre::String fileName = mParent->getTextureFileNameOfPbs(mParent->getCurrentDatablockName(), type);
    if (fileName == "")
        return; // Apparently there is no texture with that name

    // Set the datablockName, texturetype and texturefile name in the Paintlayer
    mPaintLayerManager->setTextureLayerInPaintLayer(mParent->getCurrentDatablockName(), type, fileName, layerId);
}

//****************************************************************************/
QString PaintLayerDockWidget::getTextureType(int layerId)
{
    mHelperString = "";
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
    {
        TextureLayer* textureLayer = paintLayer->getTextureLayer();
        if (textureLayer)
        {
            Ogre::PbsTextureTypes textureType = textureLayer->mTextureType;
            if (textureType == Ogre::PBSM_DIFFUSE)
                mHelperString = PBSM_DIFFUSE_QSTRING;

            if (textureType == Ogre::PBSM_NORMAL)
                mHelperString = PBSM_NORMAL_QSTRING;

            if (textureType == Ogre::PBSM_SPECULAR)
                mHelperString = PBSM_SPECULAR_QSTRING;

            if (textureType == Ogre::PBSM_ROUGHNESS)
                mHelperString = PBSM_ROUGHNESS_QSTRING;

            if (textureType == Ogre::PBSM_DETAIL_WEIGHT)
                mHelperString = PBSM_DETAIL_WEIGHT_QSTRING;

            if (textureType == Ogre::PBSM_DETAIL0)
                mHelperString = PBSM_DETAIL0_QSTRING;

            if (textureType == Ogre::PBSM_DETAIL1)
                mHelperString = PBSM_DETAIL1_QSTRING;

            if (textureType == Ogre::PBSM_DETAIL2)
                mHelperString = PBSM_DETAIL2_QSTRING;

            if (textureType == Ogre::PBSM_DETAIL3)
                mHelperString = PBSM_DETAIL3_QSTRING;

            if (textureType == Ogre::PBSM_DETAIL0_NM)
                mHelperString = PBSM_DETAIL0_NM_QSTRING;

            if (textureType == Ogre::PBSM_DETAIL1_NM)
                mHelperString = PBSM_DETAIL1_NM_QSTRING;

            if (textureType == Ogre::PBSM_DETAIL2_NM)
                mHelperString = PBSM_DETAIL2_NM_QSTRING;

            if (textureType == Ogre::PBSM_DETAIL3_NM)
                mHelperString = PBSM_DETAIL3_NM_QSTRING;

            if (textureType == Ogre::PBSM_REFLECTION)
                mHelperString = PBSM_REFLECTION_QSTRING;
        }
    }

    return mHelperString;
}

//****************************************************************************/
QStringList PaintLayerDockWidget::getAvailableTextureTypes(void)
{
    // Run through the datablock and check which texture types are used
    mAvailableTextureTypes.clear();

    if (mParent->getCurrentDatablockName() == "")
        return mAvailableTextureTypes;

    // Find the datablock and validate the texture types
    Ogre::HlmsManager* hlmsManager = Ogre::Root::getSingletonPtr()->getHlmsManager();
    Ogre::HlmsPbs* hlmsPbs = static_cast<Ogre::HlmsPbs*>( hlmsManager->getHlms(Ogre::HLMS_PBS));
    Ogre::HlmsDatablock* datablock = 0;
    try
    {
        datablock = hlmsPbs->getDatablock(mParent->getCurrentDatablockName());
        if (datablock)
        {
            // Get the textures
            Ogre::HlmsPbsDatablock* pbsDatablock = static_cast<Ogre::HlmsPbsDatablock*>(datablock);
            if (!pbsDatablock->getTexture(Ogre::PBSM_DIFFUSE).isNull())
                mAvailableTextureTypes << PBSM_DIFFUSE_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_NORMAL).isNull())
                mAvailableTextureTypes << PBSM_NORMAL_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_SPECULAR).isNull())
                mAvailableTextureTypes << PBSM_SPECULAR_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_ROUGHNESS).isNull())
                mAvailableTextureTypes << PBSM_ROUGHNESS_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_DETAIL_WEIGHT).isNull())
                mAvailableTextureTypes << PBSM_DETAIL_WEIGHT_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_DETAIL0).isNull())
                mAvailableTextureTypes << PBSM_DETAIL0_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_DETAIL1).isNull())
                mAvailableTextureTypes << PBSM_DETAIL1_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_DETAIL2).isNull())
                mAvailableTextureTypes << PBSM_DETAIL2_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_DETAIL3).isNull())
                mAvailableTextureTypes << PBSM_DETAIL3_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_DETAIL0_NM).isNull())
                mAvailableTextureTypes << PBSM_DETAIL0_NM_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_DETAIL1_NM).isNull())
                mAvailableTextureTypes << PBSM_DETAIL1_NM_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_DETAIL2_NM).isNull())
                mAvailableTextureTypes << PBSM_DETAIL2_NM_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_DETAIL3_NM).isNull())
                mAvailableTextureTypes << PBSM_DETAIL3_NM_QSTRING;

            if (!pbsDatablock->getTexture(Ogre::PBSM_REFLECTION).isNull())
                mAvailableTextureTypes << PBSM_REFLECTION_QSTRING;
        }
    }
    catch (Ogre::Exception e) {}

    return mAvailableTextureTypes;
}

//****************************************************************************/
void PaintLayerDockWidget::setPaintColour(int layerId, QColor colour)
{
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
    {
        Ogre::ColourValue col;
        col.r = colour.red() / 255.0f;
        col.g = colour.green() / 255.0f;
        col.b = colour.blue() / 255.0f;
        col.a = colour.alpha() / 255.0f;
        paintLayer->setPaintColour(col);
        paintLayer->resetPaintColour(); // To stop the jitter
    }
}

//****************************************************************************/
QColor PaintLayerDockWidget::getPaintColour(int layerId)
{
    mHelplerColour = Qt::white;
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
    {
        Ogre::ColourValue col = paintLayer->getPaintColour();
        mHelplerColour.setRed(255.0f * col.r);
        mHelplerColour.setGreen(255.0f * col.g);
        mHelplerColour.setBlue(255.0f * col.b);
        mHelplerColour.setAlpha(255.0f * col.a);
    }

    return mHelplerColour;
}

//****************************************************************************/
bool PaintLayerDockWidget::getJitterPaint(int layerId)
{
    bool jitterPaint = false;
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
        jitterPaint = paintLayer->getJitterPaint();

    return jitterPaint;
}

//****************************************************************************/
void PaintLayerDockWidget::setJitterPaintColourMin(int layerId, QColor colour)
{
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
    {
        Ogre::ColourValue col;
        col.r = colour.red() / 255.0f;
        col.g = colour.green() / 255.0f;
        col.b = colour.blue() / 255.0f;
        col.a = colour.alpha() / 255.0f;
        paintLayer->setJitterPaintColourMin(col);
    }
}

//****************************************************************************/
QColor PaintLayerDockWidget::getJitterPaintColourMin(int layerId)
{
    mHelplerColour = Qt::black;
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
    {
        Ogre::ColourValue col = paintLayer->getJitterPaintColourMin();
        mHelplerColour.setRed(255.0f * col.r);
        mHelplerColour.setGreen(255.0f * col.g);
        mHelplerColour.setBlue(255.0f * col.b);
        mHelplerColour.setAlpha(255.0f * col.a);
    }

    return mHelplerColour;
}

//****************************************************************************/
void PaintLayerDockWidget::setJitterPaintColourMax(int layerId, QColor colour)
{
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
    {
        Ogre::ColourValue col;
        col.r = colour.red() / 255.0f;
        col.g = colour.green() / 255.0f;
        col.b = colour.blue() / 255.0f;
        col.a = colour.alpha() / 255.0f;
        paintLayer->setJitterPaintColourMax(col);
    }
}

//****************************************************************************/
QColor PaintLayerDockWidget::getJitterPaintColourMax(int layerId)
{
    mHelplerColour = Qt::black;
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
    {
        Ogre::ColourValue col = paintLayer->getJitterPaintColourMax();
        mHelplerColour.setRed(255.0f * col.r);
        mHelplerColour.setGreen(255.0f * col.g);
        mHelplerColour.setBlue(255.0f * col.b);
        mHelplerColour.setAlpha(255.0f * col.a);
    }

    return mHelplerColour;
}

//****************************************************************************/
void PaintLayerDockWidget::setJitterPaintColourInterval(int layerId, float interval)
{
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
        paintLayer->setJitterPaintColourInterval(interval);
}

//****************************************************************************/
float PaintLayerDockWidget::getJitterPaintColourInterval(int layerId)
{
    float interval = 0.0f;
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
        interval = paintLayer->getJitterPaintColourInterval();

    return interval;
}

//****************************************************************************/
void PaintLayerDockWidget::setBrushForce(int layerId, float force)
{
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
    {
        paintLayer->setForce(force);
        paintLayer->resetForce();
    }
}

//****************************************************************************/
float PaintLayerDockWidget::getBrushForce(int layerId)
{
    float force = 0.1f;
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
        force = paintLayer->getForce();

    return force;
}

//****************************************************************************/
void PaintLayerDockWidget::setBrushScale(int layerId, float scale)
{
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
    {
        paintLayer->setScale(scale);
        paintLayer->resetScale();
    }
}

//****************************************************************************/
float PaintLayerDockWidget::getBrushScale(int layerId)
{
    float scale = 0.1f;
    PaintLayer* paintLayer = mPaintLayerManager->getPaintLayer(layerId);
    if (paintLayer)
        scale = paintLayer->getScale();

    return scale;
}

//****************************************************************************/
void PaintLayerDockWidget::handleLayerSelected (int layerId, QString layerName)
{
    // Get the selected layers
    QVector<int> v = mPaintLayerWidget->getSelectedLayerIds();
    mPaintLayerManager->enableAllPaintLayers(false); // First disable everything
    mPaintLayerManager->enablePaintLayers (v.toStdVector(), true); // Enable every selected layer
}
