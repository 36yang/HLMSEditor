/****************************************************************************
**
** Copyright (C) 2016
**
** This file is generated by the Magus toolkit
**
** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."
**
****************************************************************************/

// Include
#include "magus_core.h"
#include "texture_thumbs.h"

//****************************************************************************/
TextureThumbsDockWidget::TextureThumbsDockWidget(const QString& iconDir, const QString& title, QMainWindow* parent, Qt::WindowFlags flags) :
    QDockWidget (title, parent, flags),
    mParent(parent)
{
    mIconDir = iconDir;
    mTextureWidget = new Magus::QtDefaultTextureWidget(this);
    mTextureWidget->setTextureSize(QSize(128, 120)); // Add 8 pixels to the width to compensate the frame width
    setWidget(mTextureWidget);
    connect(mTextureWidget, SIGNAL(selected(QString,QString)), this, SLOT(handleAssetSelected(QString,QString)));
    connect(mTextureWidget, SIGNAL(textureFileDropped(QString,QString)), this, SLOT(handleTextureFileDropped(QString,QString)));
    connect(mTextureWidget, SIGNAL(doubleClicked(QString,QString)), this, SLOT(handleAssetDoubleClicked(QString,QString)));
    connect(mTextureWidget, SIGNAL(assetDeleted(QString,QString)), this, SLOT(handleAssetDeleted(QString,QString)));

    // Perform standard functions
    createActions();
    createMenus();
    createToolBars();

    QWidget* oldTitleBar = titleBarWidget();
    setTitleBarWidget(new QWidget());
    delete oldTitleBar;}

//****************************************************************************/
TextureThumbsDockWidget::~TextureThumbsDockWidget(void)
{
}

//****************************************************************************/
void TextureThumbsDockWidget::createActions(void)
{
}

//****************************************************************************/
void TextureThumbsDockWidget::createMenus(void)
{
}

//****************************************************************************/
void TextureThumbsDockWidget::createToolBars(void)
{
}

//****************************************************************************/
void TextureThumbsDockWidget::setResources(const QVector<Magus::QtResourceInfo*>& resources)
{
    // Only display the assets of the toplevel
    clearContent();
    QVectorIterator<Magus::QtResourceInfo*> it(resources);
    it.toFront();
    Magus::QtResourceInfo* info;
    QString fileName;
    while (it.hasNext())
    {
        info = it.next();
        if (info->resourceType == Magus::TOOL_RESOURCETREE_KEY_TYPE_ASSET)
        {
            addTextureFile(info->fullQualifiedName);
        }
    }
}

//****************************************************************************/
void TextureThumbsDockWidget::addTextureFile (const QString& fileName)
{
    QString baseName = fileName;
    baseName = getBaseFileName(baseName);
    QImage image;
    QPixmap pixmap;
    try
    {
        if (Magus::fileExist(fileName))
        {
            // Decrease the texture, otherwise it cannot be loaded by the pixmap
            QImageReader reader(fileName);
            reader.setScaledSize(mTextureWidget->getTextureSize()); // Prevents from reading to much data in memory
            image = reader.read();
            pixmap.convertFromImage(image);
        }
        else
        {
            pixmap.load(FILE_NO_IMAGE);
        }

        mTextureWidget->addTexture(pixmap, fileName, baseName);
    }
    catch (QException e){}
}

//****************************************************************************/
void TextureThumbsDockWidget::deleteTextureFile (const QString& fileName)
{
    mTextureWidget->deleteTexture(fileName);
}

//****************************************************************************/
void TextureThumbsDockWidget::setSelectThumb(const QString& fileName)
{
    // Use the full qualified fileName
    mTextureWidget->setTextureSelected(fileName, true);
}

//****************************************************************************/
void TextureThumbsDockWidget::filter(const QString& pattern)
{
    resetFilter();
    mTextureWidget->filter(pattern);
}

//****************************************************************************/
void TextureThumbsDockWidget::filter(QStringList& resources)
{
    resetFilter();
    mTextureWidget->filter(resources);
}

//****************************************************************************/
void TextureThumbsDockWidget::resetFilter(void)
{
    mTextureWidget->resetFilter();
}

//****************************************************************************/
void TextureThumbsDockWidget::clearContent(void)
{
    mTextureWidget->clearContent();
}

//****************************************************************************/
const QString& TextureThumbsDockWidget::getCurrentFileName (void)
{
    return mTextureWidget->getNameTexture();
}
//****************************************************************************/
void TextureThumbsDockWidget::handleAssetDeleted(const QString& name, const QString& baseName)
{
    // Note, that these are the thumb image names
    emit assetDeleted(name, baseName);
}

//****************************************************************************/
void TextureThumbsDockWidget::handleAssetSelected(const QString& name, const QString& baseName)
{
    // Note, that these are the thumb image names
    emit assetSelected(name, baseName);
}

//****************************************************************************/
void TextureThumbsDockWidget::handleTextureFileDropped(const QString& name, const QString& baseName)
{
    emit textureFileDropped(name, baseName);
}

//****************************************************************************/
void TextureThumbsDockWidget::handleAssetDoubleClicked(const QString& name, const QString& baseName)
{
    // Note, that these are the thumb image names
    emit assetDoubleClicked(name, baseName);
}
